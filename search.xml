<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记Java三级项目――五子棋</title>
      <link href="/2022/08/09/ji-java-san-ji-xiang-mu-wu-zi-qi/"/>
      <url>/2022/08/09/ji-java-san-ji-xiang-mu-wu-zi-qi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这学期 Java 的三级项目，本是在老师给的“学生成绩管理系统”部分代码的基础上，实现图形化界面。着实无趣，但既然说可以做自己想做的，便想着做一个能网络对战的五子棋，最终时间仓促（忙着搞xx脚本）只能完成个单机的（Play Gobang with yourself without AI……）</p></blockquote><h1 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h1><p>棋子可以用RadialGradientPaint实现，更立体逼真，用swing做的界面，也不谈好看了</p><p><img src="https://cdn.naccl.top/blog/blogHosting/2019/12/B01/001.jpg"></p><p><img src="https://cdn.naccl.top/blog/blogHosting/2019/12/B01/002.jpg"></p><p><img src="https://cdn.naccl.top/blog/blogHosting/2019/12/B01/003.jpg"></p><p><img src="https://cdn.naccl.top/blog/blogHosting/2019/12/B01/004.jpg"></p><p>用户类和房间类的对应功能并没有实现，只能自己和自己下棋。</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><p>swing的代码没啥好看的，就放个棋盘相关的逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">game</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>geom<span class="token punctuation">.</span></span><span class="token class-name">Ellipse2D</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChessBoard</span> <span class="token keyword">extends</span> <span class="token class-name">JComponent</span> <span class="token keyword">implements</span> <span class="token class-name">MouseListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MARGIN <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">// 边距</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> GRID_SPACING <span class="token operator">=</span> <span class="token number">36</span><span class="token punctuation">;</span><span class="token comment">// 网格间距</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> ROWS <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span><span class="token comment">// 15行</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COLS <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span><span class="token comment">// 15列</span>    <span class="token keyword">private</span> <span class="token class-name">Chess</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chessArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chess</span><span class="token punctuation">[</span><span class="token punctuation">(</span>ROWS <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>COLS <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 总225个棋子</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrixChessBoard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ROWS <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>COLS <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 记录棋盘使用情况</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> chessCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 当前已下棋子个数</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isBlackNow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">// 当前棋子黑白</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> win <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 当前是否分出胜负</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sameColorCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 深搜记录连珠个数</span>    <span class="token comment">// 当前鼠标在棋盘上对应的格子，-1为不在棋盘上</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mouseX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mouseY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 深搜判断胜负用到的八个搜索方向</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dx <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dy <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ChessBoard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 监听鼠标的点击情况</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addMouseListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 监听鼠标在棋盘上的移动</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addMouseMotionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MouseMotionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseDragged</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">setCursor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cursor</span><span class="token punctuation">(</span><span class="token class-name">Cursor</span><span class="token punctuation">.</span>DEFAULT_CURSOR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseMoved</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 胜负已分后不再显示落点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">setCursor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cursor</span><span class="token punctuation">(</span><span class="token class-name">Cursor</span><span class="token punctuation">.</span>DEFAULT_CURSOR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment">// 获取当前鼠标在棋盘上对应的落点</span>                <span class="token keyword">int</span> tmpMouseX <span class="token operator">=</span> <span class="token function">getX</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> tmpMouseY <span class="token operator">=</span> <span class="token function">getY</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isClick</span><span class="token punctuation">(</span>tmpMouseX<span class="token punctuation">,</span> tmpMouseY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment">// 可以落子时设置鼠标样式</span>                    <span class="token function">setCursor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cursor</span><span class="token punctuation">(</span><span class="token class-name">Cursor</span><span class="token punctuation">.</span>HAND_CURSOR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 画预落棋子红框</span>                    mouseX <span class="token operator">=</span> tmpMouseX<span class="token punctuation">;</span>                    mouseY <span class="token operator">=</span> tmpMouseY<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// 不可以落子时恢复鼠标样式</span>                    <span class="token function">setCursor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cursor</span><span class="token punctuation">(</span><span class="token class-name">Cursor</span><span class="token punctuation">.</span>DEFAULT_CURSOR<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mouseX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    mouseY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paintComponent</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Graphics2D</span> g2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Graphics2D</span><span class="token punctuation">)</span> g<span class="token punctuation">;</span>        <span class="token comment">// 设置棋盘背景颜色</span>        g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">213</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 画棋盘</span>        g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ROWS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//画横线</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>MARGIN<span class="token punctuation">,</span> MARGIN <span class="token operator">+</span> i <span class="token operator">*</span> GRID_SPACING<span class="token punctuation">,</span> MARGIN <span class="token operator">+</span> COLS <span class="token operator">*</span> GRID_SPACING<span class="token punctuation">,</span> MARGIN <span class="token operator">+</span> i <span class="token operator">*</span> GRID_SPACING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> COLS<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//画竖线</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>MARGIN <span class="token operator">+</span> i <span class="token operator">*</span> GRID_SPACING<span class="token punctuation">,</span> MARGIN<span class="token punctuation">,</span> MARGIN <span class="token operator">+</span> i <span class="token operator">*</span> GRID_SPACING<span class="token punctuation">,</span> MARGIN <span class="token operator">+</span> ROWS <span class="token operator">*</span> GRID_SPACING<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 画五个点</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> dotRadius <span class="token operator">=</span> GRID_SPACING <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> dotCenterX <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>COLS <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dotCenterY <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>ROWS <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> dotTopLeftX <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dotTopLeftY <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> dotTopRightX <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>COLS <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dotTopRightY <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> dotLowerLeftX <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dotLowerLeftY <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>ROWS <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> dotLowerRightX <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>COLS <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dotLowerRightY <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>ROWS <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Ellipse2D</span> dot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ellipse2D<span class="token punctuation">.</span>Double</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDot</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> dotCenterX<span class="token punctuation">,</span> dotCenterY<span class="token punctuation">,</span> dotRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDot</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> dotTopLeftX<span class="token punctuation">,</span> dotTopLeftY<span class="token punctuation">,</span> dotRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDot</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> dotTopRightX<span class="token punctuation">,</span> dotTopRightY<span class="token punctuation">,</span> dotRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDot</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> dotLowerLeftX<span class="token punctuation">,</span> dotLowerLeftY<span class="token punctuation">,</span> dotRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDot</span><span class="token punctuation">(</span>dot<span class="token punctuation">,</span> dotLowerRightX<span class="token punctuation">,</span> dotLowerRightY<span class="token punctuation">,</span> dotRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>        g2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>dot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 画棋子</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chessCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> centerX <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>chessArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> centerY <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>chessArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> chessColor <span class="token operator">=</span> chessArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isBlack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Ellipse2D</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ellipse2D<span class="token punctuation">.</span>Double</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            circle<span class="token punctuation">.</span><span class="token function">setFrameFromCenter</span><span class="token punctuation">(</span>centerX<span class="token punctuation">,</span> centerY<span class="token punctuation">,</span> centerX <span class="token operator">+</span> GRID_SPACING <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> centerY <span class="token operator">+</span> GRID_SPACING <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chessColor<span class="token punctuation">)</span> g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>WHITE<span class="token punctuation">)</span><span class="token punctuation">;</span>            g2<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>circle<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//最后一个棋子用红框标出</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> chessCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>                g2<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>centerX <span class="token operator">-</span> <span class="token number">18</span><span class="token punctuation">,</span> centerY <span class="token operator">-</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment">//画预落棋子红框</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> length <span class="token operator">=</span> GRID_SPACING <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> frameRadius <span class="token operator">=</span> GRID_SPACING <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mouseX <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> mouseY <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 默认-1不显示</span>            <span class="token keyword">int</span> absMouseX <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>mouseX<span class="token punctuation">)</span><span class="token punctuation">,</span> absMouseY <span class="token operator">=</span> <span class="token function">toChess</span><span class="token punctuation">(</span>mouseY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> frameTopLeftX <span class="token operator">=</span> absMouseX <span class="token operator">-</span> frameRadius<span class="token punctuation">,</span> frameTopLeftY <span class="token operator">=</span> absMouseY <span class="token operator">-</span> frameRadius<span class="token punctuation">;</span>            <span class="token keyword">int</span> frameTopRightX <span class="token operator">=</span> absMouseX <span class="token operator">+</span> frameRadius<span class="token punctuation">,</span> frameTopRightY <span class="token operator">=</span> absMouseY <span class="token operator">-</span> frameRadius<span class="token punctuation">;</span>            <span class="token keyword">int</span> frameLowerLeftX <span class="token operator">=</span> absMouseX <span class="token operator">-</span> frameRadius<span class="token punctuation">,</span> frameLowerLeftY <span class="token operator">=</span> absMouseY <span class="token operator">+</span> frameRadius<span class="token punctuation">;</span>            <span class="token keyword">int</span> frameLowerRightX <span class="token operator">=</span> absMouseX <span class="token operator">+</span> frameRadius<span class="token punctuation">,</span> frameLowerRightY <span class="token operator">=</span> absMouseY <span class="token operator">+</span> frameRadius<span class="token punctuation">;</span>            g2<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//左上角</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>frameTopLeftX<span class="token punctuation">,</span> frameTopLeftY<span class="token punctuation">,</span> frameTopLeftX<span class="token punctuation">,</span> frameTopLeftY <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>frameTopLeftX<span class="token punctuation">,</span> frameTopLeftY<span class="token punctuation">,</span> frameTopLeftX <span class="token operator">+</span> length<span class="token punctuation">,</span> frameTopLeftY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//右上角</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>frameTopRightX<span class="token punctuation">,</span> frameTopRightY<span class="token punctuation">,</span> frameTopRightX<span class="token punctuation">,</span> frameTopRightY <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>frameTopRightX<span class="token punctuation">,</span> frameTopRightY<span class="token punctuation">,</span> frameTopRightX <span class="token operator">-</span> length<span class="token punctuation">,</span> frameTopRightY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//左下角</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>frameLowerLeftX<span class="token punctuation">,</span> frameLowerLeftY<span class="token punctuation">,</span> frameLowerLeftX<span class="token punctuation">,</span> frameLowerLeftY <span class="token operator">-</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>frameLowerLeftX<span class="token punctuation">,</span> frameLowerLeftY<span class="token punctuation">,</span> frameLowerLeftX <span class="token operator">+</span> length<span class="token punctuation">,</span> frameLowerLeftY<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//右下角</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>frameLowerRightX<span class="token punctuation">,</span> frameLowerRightY<span class="token punctuation">,</span> frameLowerRightX<span class="token punctuation">,</span> frameLowerRightY <span class="token operator">-</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>            g2<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>frameLowerRightX<span class="token punctuation">,</span> frameLowerRightY<span class="token punctuation">,</span> frameLowerRightX <span class="token operator">-</span> length<span class="token punctuation">,</span> frameLowerRightY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 落子</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mousePressed</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 胜负已分后不可再下</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//            JOptionPane.showMessageDialog(this, "对局已经结束，请重新开始！", "Game over !", JOptionPane.INFORMATION_MESSAGE);</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 获取落下的棋子在棋盘上对应的坐标</span>        <span class="token keyword">int</span> chessX <span class="token operator">=</span> <span class="token function">getX</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> chessY <span class="token operator">=</span> <span class="token function">getY</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>chessX <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> chessY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isClick</span><span class="token punctuation">(</span>chessX<span class="token punctuation">,</span> chessY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">// 判断是否可以落子</span>        <span class="token comment">// 可以落子时，记录棋子</span>        <span class="token class-name">Chess</span> ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chess</span><span class="token punctuation">(</span>chessX<span class="token punctuation">,</span> chessY<span class="token punctuation">,</span> isBlackNow<span class="token punctuation">)</span><span class="token punctuation">;</span>        chessArray<span class="token punctuation">[</span>chessCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isBlackNow<span class="token punctuation">)</span> matrixChessBoard<span class="token punctuation">[</span>chessX<span class="token punctuation">]</span><span class="token punctuation">[</span>chessY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 记录棋子，0为空，1为黑棋，2为白棋</span>        <span class="token keyword">else</span> matrixChessBoard<span class="token punctuation">[</span>chessX<span class="token punctuation">]</span><span class="token punctuation">[</span>chessY<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">isWin</span><span class="token punctuation">(</span>chessX<span class="token punctuation">,</span> chessY<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> isBlackNow <span class="token operator">?</span> <span class="token string">"黑棋获胜！"</span> <span class="token operator">:</span> <span class="token string">"白棋获胜！"</span><span class="token punctuation">,</span> <span class="token string">"Game over !"</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>INFORMATION_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isBlackNow <span class="token operator">?</span> <span class="token string">"black win!"</span> <span class="token operator">:</span> <span class="token string">"white win!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        isBlackNow <span class="token operator">=</span> <span class="token operator">!</span>isBlackNow<span class="token punctuation">;</span><span class="token comment">// 设置下一个棋子颜色</span>    <span class="token punctuation">}</span>    <span class="token comment">// 深搜判断是否五连珠</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">isWin</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sameColorCount <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            win <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 起始四个方向</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sameColorCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> nx1 <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ny1 <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> nx2 <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ny2 <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nx1 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny1 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx1 <span class="token operator">&lt;=</span> ROWS <span class="token operator">&amp;&amp;</span> ny1 <span class="token operator">&lt;=</span> COLS<span class="token punctuation">)</span> <span class="token function">isWin</span><span class="token punctuation">(</span>nx1<span class="token punctuation">,</span> ny1<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nx2 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny2 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx2 <span class="token operator">&lt;=</span> ROWS <span class="token operator">&amp;&amp;</span> ny2 <span class="token operator">&lt;=</span> COLS<span class="token punctuation">)</span> <span class="token function">isWin</span><span class="token punctuation">(</span>nx2<span class="token punctuation">,</span> ny2<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 当前方向下一个位置是否连珠</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>isBlackNow <span class="token operator">&amp;&amp;</span> matrixChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>isBlackNow <span class="token operator">&amp;&amp;</span> matrixChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sameColorCount<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token operator">&lt;=</span> ROWS <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;=</span> COLS<span class="token punctuation">)</span> <span class="token function">isWin</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setDot</span><span class="token punctuation">(</span><span class="token class-name">Ellipse2D</span> dot<span class="token punctuation">,</span> <span class="token keyword">int</span> dotX<span class="token punctuation">,</span> <span class="token keyword">int</span> dotY<span class="token punctuation">,</span> <span class="token keyword">int</span> dotRadius<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dot<span class="token punctuation">.</span><span class="token function">setFrameFromCenter</span><span class="token punctuation">(</span>dotX<span class="token punctuation">,</span> dotY<span class="token punctuation">,</span> dotX <span class="token operator">+</span> dotRadius<span class="token punctuation">,</span> dotY <span class="token operator">+</span> dotRadius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取在棋盘上对应的坐标</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> MARGIN <span class="token operator">+</span> GRID_SPACING <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> GRID_SPACING<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> MARGIN <span class="token operator">+</span> GRID_SPACING <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">/</span> GRID_SPACING<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取在面板上对应的坐标</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">toChess</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> i <span class="token operator">*</span> GRID_SPACING <span class="token operator">+</span> MARGIN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// x,y坐标是否存在棋子</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isExistChess</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//        for (int i = 0; i &lt; chessCount; i++) {</span><span class="token comment">//            if (chessArray[i].getX() == x &amp;&amp; chessArray[i].getY() == y) return true;</span><span class="token comment">//        }</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrixChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// x,y坐标是否可点击</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isClick</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">&lt;=</span> ROWS <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;=</span> COLS <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isExistChess</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 重新开始</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chessCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> chessArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        matrixChessBoard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ROWS <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>COLS <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        chessCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        win <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        isBlackNow <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 悔棋</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">goBack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chessCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">// 如果棋盘上未落子，不可以悔棋</span>        <span class="token comment">// 胜负已分，不可悔棋</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"对局已经结束，请重新开始！"</span><span class="token punctuation">,</span> <span class="token string">"Game over !"</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>INFORMATION_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        matrixChessBoard<span class="token punctuation">[</span>chessArray<span class="token punctuation">[</span>chessCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>chessArray<span class="token punctuation">[</span>chessCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        chessArray<span class="token punctuation">[</span>chessCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        chessCount<span class="token operator">--</span><span class="token punctuation">;</span>        isBlackNow <span class="token operator">=</span> <span class="token operator">!</span>isBlackNow<span class="token punctuation">;</span>        <span class="token function">repaint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 认输</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">giveUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 胜负已分，不可认输</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>win<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"对局已经结束，请重新开始！"</span><span class="token punctuation">,</span> <span class="token string">"Game over !"</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>INFORMATION_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        win <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span><span class="token function">showMessageDialog</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> isBlackNow <span class="token operator">?</span> <span class="token string">"白棋获胜！"</span> <span class="token operator">:</span> <span class="token string">"黑棋获胜！"</span><span class="token punctuation">,</span> <span class="token string">"Game over !"</span><span class="token punctuation">,</span> <span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>INFORMATION_MESSAGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseClicked</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseReleased</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseEntered</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mouseExited</span><span class="token punctuation">(</span><span class="token class-name">MouseEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充：</p><p>正在做网络版对战，赶着交OOSAD的四级项目。。</p><p>上面的深搜逻辑有问题，结束条件应该放在递归的下面，否则在棋盘左上角和右上角处需要”六连珠“才能获胜（和定义的八个方向顺序有关）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>sameColorCount <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    win <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>正确写法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 深搜判断是否五连珠</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">isWin</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 起始四个方向</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sameColorCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> nx1 <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> ny1 <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> nx2 <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ny2 <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nx1 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny1 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx1 <span class="token operator">&lt;=</span> ROWS <span class="token operator">&amp;&amp;</span> ny1 <span class="token operator">&lt;=</span> COLS<span class="token punctuation">)</span> <span class="token function">isWin</span><span class="token punctuation">(</span>nx1<span class="token punctuation">,</span> ny1<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nx2 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny2 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx2 <span class="token operator">&lt;=</span> ROWS <span class="token operator">&amp;&amp;</span> ny2 <span class="token operator">&lt;=</span> COLS<span class="token punctuation">)</span> <span class="token function">isWin</span><span class="token punctuation">(</span>nx2<span class="token punctuation">,</span> ny2<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 当前方向下一个位置是否连珠</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>isBlackNow <span class="token operator">&amp;&amp;</span> matrixChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>isBlackNow <span class="token operator">&amp;&amp;</span> matrixChessBoard<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sameColorCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> dx<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> dy<span class="token punctuation">[</span>d<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token operator">&lt;=</span> ROWS <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;=</span> COLS<span class="token punctuation">)</span> <span class="token function">isWin</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">//结束条件放在递归下方</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sameColorCount <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        win <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>没什么东西，大佬们都能看得懂</p><p>GitHub：<a href="https://github.com/Naccl/gobang-java-swing">GitHub - Naccl/gobang-java-swing: Play gobang with yourself without AI.</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Linux Bash命令教程</title>
      <link href="/2022/08/08/chang-yong-linux-bash-ming-ling-jiao-cheng/"/>
      <url>/2022/08/08/chang-yong-linux-bash-ming-ling-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>常用linux命令介绍。入门Linux必学的命令行，熟练掌握后，效率远超Windows GUI操作。重要的是，可以方便的做自动化处理！</p><p>更多命令在线查询&nbsp;<a href="https://linux-command.17lai.site/">linux-command.17lai.site</a></p></blockquote><p><img src="https://cimg1.17lai.site/data/2022/04/2120220421192048.svg"></p><h2 id="一、系统相关"><a href="#一、系统相关" class="headerlink" title="一、系统相关"></a>一、系统相关</h2><h3 id="1-hostname-查看主机名"><a href="#1-hostname-查看主机名" class="headerlink" title="1. hostname - 查看主机名"></a>1. hostname - 查看主机名</h3><p><code>hostname</code>命令用于查看系统的主机名，或是修改系统的主机名。</p><p><code>hostname</code>的常用命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示系统的当前主机名</span><span class="token function">hostname</span><span class="token comment"># 修改你系统的主机名</span><span class="token function">hostname</span> blinkfox-system<span class="token comment"># 使用 -F 选项，从指定的文件中读取主机名</span><span class="token function">hostname</span> -F /root/hostname.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-uptime-查看系统运行时间"><a href="#2-uptime-查看系统运行时间" class="headerlink" title="2. uptime - 查看系统运行时间"></a>2. uptime - 查看系统运行时间</h3><p><code>uptime</code>命令用于打印系统的运行时间等信息。使用如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uptime</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-w、who-列出登录的用户"><a href="#3-w、who-列出登录的用户" class="headerlink" title="3. w、who - 列出登录的用户"></a>3. w、who - 列出登录的用户</h3><p><code>w</code>命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">w<span class="token comment"># 打印如下</span><span class="token number">22</span>:42  up <span class="token number">18</span> days, <span class="token number">1</span> hr, <span class="token number">2</span> users, load averages: <span class="token number">1.23</span> <span class="token number">1.79</span> <span class="token number">1.75</span><span class="token environment constant">USER</span>     TTY      FROM              LOGIN@  IDLE WHATblinkfox console  -                日19   6days -blinkfox s000     -                五23       - w<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>who</code>命令有与<code>w</code>命令类似的用途，但它的功能比<code>w</code>命令更强大一些。语法格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>FILE <span class="token operator">|</span> ARG1 ARG2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>who</code>常用命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示当前登录的所有用户信息</span><span class="token function">who</span><span class="token comment"># 显示系统的启动时间</span><span class="token function">who</span> -b<span class="token comment"># 显示系统登录进程</span><span class="token function">who</span> -l<span class="token comment"># 显示与当前标准输入关联的用户信息</span><span class="token function">who</span> -m<span class="token comment"># 显示系统的运行级别</span><span class="token function">who</span> -r<span class="token comment"># 显示所有登录用户的用户名和登录用户数</span><span class="token function">who</span> -q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-uname-查看系统信息"><a href="#4-uname-查看系统信息" class="headerlink" title="4. uname - 查看系统信息"></a>4. uname - 查看系统信息</h3><p><code>uname</code>命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用使用方式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 只打印内核的名称</span><span class="token function">uname</span><span class="token comment"># 使用 -n 选项，只打印系统的主机名</span><span class="token function">uname</span> -n<span class="token comment"># 使用 -r 选项，打印内核版本信息</span><span class="token function">uname</span> -r<span class="token comment"># 使用 -m 选项，打印系统的硬件名称</span><span class="token function">uname</span> -m<span class="token comment"># 使用 -p 选项，打印系统的处理器类型信息</span><span class="token function">uname</span> -p<span class="token comment"># 使用 -i 选项，打印系统的硬件平台信息</span><span class="token function">uname</span> -i<span class="token comment"># 使用 -a 选项，打印上述所有示例中的信息</span><span class="token function">uname</span> -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-date-显示和设置系统日期和时间"><a href="#5-date-显示和设置系统日期和时间" class="headerlink" title="5. date - 显示和设置系统日期和时间"></a>5. date - 显示和设置系统日期和时间</h3><p><code>date</code>命令用于以多种格式显示日期和时间，或设置系统的日期和时间。<code>date</code>命令的语法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>+FORMAT<span class="token punctuation">]</span><span class="token function">date</span> <span class="token punctuation">[</span>-u<span class="token operator">|</span>--utc<span class="token operator">|</span>--universal<span class="token punctuation">]</span> <span class="token punctuation">[</span>MMDDhhmm<span class="token punctuation">[</span><span class="token punctuation">[</span>CC<span class="token punctuation">]</span>YY<span class="token punctuation">]</span><span class="token punctuation">[</span>.ss<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>常用使用命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以默认格式显示系统的当前日期时间</span><span class="token function">date</span><span class="token comment"># 格式化当前日期</span><span class="token function">date</span> +<span class="token string">"%Y-%m-%d"</span><span class="token comment"># 格式化输出昨天的日期</span><span class="token function">date</span> -d <span class="token string">"1 day ago"</span> +<span class="token string">"%Y-%m-%d"</span><span class="token comment"># 2秒后格式化输出</span><span class="token function">date</span> -d <span class="token string">"2 second"</span> +<span class="token string">"%Y-%m-%d %H:%M.%S"</span><span class="token comment"># 普通格式化转出</span><span class="token function">date</span> -d <span class="token string">"2009-12-12"</span> +<span class="token string">"%Y/%m/%d %H:%M.%S"</span><span class="token comment"># apache格式转换</span><span class="token function">date</span> -d <span class="token string">"Dec 5, 2009 12:00:37 AM"</span> +<span class="token string">"%Y-%m-%d %H:%M.%S"</span><span class="token comment"># 日期加减操作</span><span class="token function">date</span> +%Y%m%d <span class="token comment">#显示前天年月日</span><span class="token function">date</span> -d <span class="token string">"+1 day"</span> +%Y%m%d <span class="token comment">#显示前一天的日期</span><span class="token function">date</span> -d <span class="token string">"-1 day"</span> +%Y%m%d <span class="token comment">#显示后一天的日期</span><span class="token function">date</span> -d <span class="token string">"-1 month"</span> +%Y%m%d <span class="token comment">#显示上一月的日期</span><span class="token function">date</span> -d <span class="token string">"+1 month"</span> +%Y%m%d <span class="token comment">#显示下一月的日期</span><span class="token function">date</span> -d <span class="token string">"-1 year"</span> +%Y%m%d <span class="token comment">#显示前一年的日期</span><span class="token function">date</span> -d <span class="token string">"+1 year"</span> +%Y%m%d <span class="token comment">#显示下一年的日期</span><span class="token comment"># 设定时间</span><span class="token function">date</span> -s <span class="token comment"># 设置当前时间，只有root权限才能设置，其他只能查看</span><span class="token function">date</span> -s <span class="token number">20160816</span> <span class="token comment"># 设置成20160816，这样会把具体时间设置成空00:00:00</span><span class="token function">date</span> -s 01:01:01 <span class="token comment"># 设置具体时间，不会对日期做更改</span><span class="token function">date</span> -s <span class="token string">"01:01:01 2012-05-23"</span> <span class="token comment"># 这样可以设置全部时间</span><span class="token function">date</span> -s <span class="token string">"01:01:01 20120523"</span> <span class="token comment"># 这样可以设置全部时间</span><span class="token function">date</span> -s <span class="token string">"2012-05-23 01:01:01"</span> <span class="token comment"># 这样可以设置全部时间</span><span class="token function">date</span> -s <span class="token string">"20120523 01:01:01"</span> <span class="token comment"># 这样可以设置全部时间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-id-显示用户属性"><a href="#6-id-显示用户属性" class="headerlink" title="6. id - 显示用户属性"></a>6. id - 显示用户属性</h3><p><code>id</code>命令用于打印输出用户<code>uid</code>、<code>gid</code>、用户名和组名等用户身份信息。<code>id</code>命令的语法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">id</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>USERNAME<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常见使用命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息</span><span class="token function">id</span><span class="token comment"># 使用 -u 选项，输出用户的 uid</span><span class="token function">id</span> -u<span class="token comment">#-u 选项和 -n 选项结合使用，输出账户的用户名</span><span class="token function">id</span> -un<span class="token comment"># 使用 -g 选项，输出帐号当前起作用的gid</span><span class="token function">id</span> -g<span class="token comment"># -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名</span><span class="token function">id</span> -gn<span class="token comment"># 使用 -G 选项，输出帐号所属的所有群组id</span><span class="token function">id</span> -G root<span class="token comment"># -G 与 -n 选项结合使用，输出账号所属的所有群组的名称</span><span class="token function">id</span> -Gn root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、文件和目录操作"><a href="#二、文件和目录操作" class="headerlink" title="二、文件和目录操作"></a>二、文件和目录操作</h2><h3 id="1-touch-创建文件"><a href="#1-touch-创建文件" class="headerlink" title="1. touch - 创建文件"></a>1. touch - 创建文件</h3><p><code>touch</code>命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。<code>touch</code>命令又如下选项：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-a: 只改变访问时间-c: 不创建任何文件-m: 只改变修改时间-r: 使用指定文件的时间替代当前时间-t: 使用 <span class="token punctuation">[</span><span class="token punctuation">[</span>CC<span class="token punctuation">]</span>YY<span class="token punctuation">]</span>MMDDhhmm<span class="token punctuation">[</span>.ss<span class="token punctuation">]</span> 替代当前时间<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>touch 命令的常见用法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个名为 effyl 的新空文件</span><span class="token function">touch</span> effyl<span class="token comment"># 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件</span><span class="token function">touch</span> effyl myeffyl lueffyl<span class="token comment"># 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个</span><span class="token function">touch</span> -a effyl<span class="token comment"># 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳</span><span class="token function">touch</span> -c effyl<span class="token comment"># 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变</span><span class="token function">touch</span> -m effyl<span class="token comment"># 使用 -c 和 -t 选项，来明确设置文件的时间</span><span class="token function">touch</span> -c -t YYMMDDHHMM filename<span class="token comment"># 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项</span><span class="token function">touch</span> -r myeffyl effyl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-mkdir-创建目录"><a href="#2-mkdir-创建目录" class="headerlink" title="2.mkdir - 创建目录"></a>2.mkdir - 创建目录</h3><p><code>mkdir</code>命令用于创建一个新目录。最基本的<code>mkdir</code>命令的使用方法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录下创建一个给定的目录名</span><span class="token function">mkdir</span> <span class="token operator">&lt;</span>dirname<span class="token operator">&gt;</span><span class="token comment"># 在 backup 中的相对路径创建一个名为 old 的目录</span><span class="token function">mkdir</span> backup/old<span class="token comment"># 在 backup 中的绝对路径中创建一个名为 old 的目录</span><span class="token function">mkdir</span> /home/blinkfox/backup/old<span class="token comment"># 使用 -p 选项，会自动创建所有还不存在的父目录</span><span class="token function">mkdir</span> -p backup/old<span class="token comment"># 使用 -m 选项，可以设置将要创建目录的权限</span><span class="token comment"># 如：创建一个任何人都有读写访问权限的目录</span><span class="token function">mkdir</span> -p -m <span class="token number">777</span> backup/old<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-cp-复制文件或目录"><a href="#3-cp-复制文件或目录" class="headerlink" title="3.cp - 复制文件或目录"></a>3.cp - 复制文件或目录</h3><p><code>cp</code>命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。</p><p>使用 cp 命令复制文件和目录的语法有以下几种：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 复制源文件到目标文件</span><span class="token function">cp</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> SOURCE DEST<span class="token comment"># 复制一个或多个源文件到一个目录</span><span class="token function">cp</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> SOURCE<span class="token punctuation">..</span>. DIRECTORY<span class="token comment"># 同上</span><span class="token function">cp</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> -t DIRECTORY SOURCE<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常用使用示例如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt</span><span class="token function">cp</span> file.txt newfile.txt<span class="token comment"># 复制当前目录下的 file.txt 文件到 /tmp 目录下</span><span class="token function">cp</span> file.txt /tmp<span class="token comment"># 复制当前目录下的所有文件到 /tmp 目录下</span><span class="token function">cp</span> * /tmp<span class="token comment"># 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息</span><span class="token function">cp</span> -p filename /path/to/new/location/myfile<span class="token comment"># 使用 -R 或 -r 选项，恶意递归地复制一个目录</span><span class="token comment"># 即将一个目录及其下的所有文件和子目录都复制到另一个目录</span><span class="token function">cp</span> -R * /home/blinkfox/backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-ln-链接文件或目录"><a href="#4-ln-链接文件或目录" class="headerlink" title="4.ln - 链接文件或目录"></a>4.ln - 链接文件或目录</h3><p><code>ln</code>命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so</span><span class="token function">ln</span> -s /home/blinkfox/src/library.so /home/blinkfox/lib<span class="token comment"># 创建目录的软链接</span><span class="token function">ln</span> -s /home/blinkfox/src <span class="token builtin class-name">source</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-mv-移动文件或目录"><a href="#5-mv-移动文件或目录" class="headerlink" title="5. mv - 移动文件或目录"></a>5. mv - 移动文件或目录</h3><p><code>mv</code>命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件，<code>mv</code>命令还可用于修改文件或目录的名字。</p><p>mv 命令的基本语法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> SOURCE<span class="token punctuation">..</span>. DIRECTORY<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将当前目录下的文件 source.txt 移到目录 /tmp 下</span><span class="token function">mv</span> source.txt /tmp<span class="token comment"># 将目录 dir1、dir2 移到目录 dir_dist 下</span><span class="token function">mv</span> dir1 dir2 dir_dist<span class="token comment"># 将当前目录下的 old.txt 文件更名为 new.txt</span><span class="token function">mv</span> old.txt new.txt<span class="token comment"># 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息</span><span class="token function">mv</span> -i old.txt new.txt<span class="token comment"># 将当前目录下的所有文件移动到目录 /tmp 下</span><span class="token function">mv</span> * /tmp/<span class="token comment"># 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录</span><span class="token function">mv</span> -u dir1/* dir2/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-rm-删除文件或目录"><a href="#6-rm-删除文件或目录" class="headerlink" title="6.rm - 删除文件或目录"></a>6.rm - 删除文件或目录</h3><p><code>rm</code>命令用于删除指定的文件和目录。其语法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span><span class="token punctuation">..</span>. FILE<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>rm</code>的常用命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除当前目录下的文件 file1.txt、file2.txt、file3.txt</span><span class="token function">rm</span> file1.txt file2.txt file3.txt<span class="token comment"># 删除当前目录下的所有文件</span><span class="token function">rm</span> *<span class="token comment"># 删除你当前帐号主目录下的 temp 目录中的所有文件</span><span class="token function">rm</span> ~/temp/*<span class="token comment"># 使用 -i 选项，可以在删除每个文件或目录前提示用户确认</span><span class="token function">rm</span> -i *<span class="token comment"># 删除当前目录下所有以".doc"结尾的文件</span><span class="token function">rm</span> *.doc<span class="token comment"># 删除当前目录下所有文件名中包含"movie"字符串的文件</span><span class="token function">rm</span> *movie*<span class="token comment"># 删除当前目录下所有以"a"开头的文件</span><span class="token function">rm</span> a*<span class="token comment"># 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件</span><span class="token function">rm</span> ???<span class="token comment"># 删除当前目录下文件扩展名有两个字符的所有文件</span><span class="token function">rm</span> *.??<span class="token comment"># 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件</span><span class="token function">rm</span> *<span class="token punctuation">[</span>abc<span class="token punctuation">]</span>*<span class="token comment"># 删除当前目录下文件名中包含 0~9 的所有文件</span><span class="token function">rm</span> *<span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span>*<span class="token comment"># 删除当前目录下文件扩展名是字母 c 或 h 的所有文件</span><span class="token function">rm</span> *.<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token comment"># 删除 /tmp 目录下的所有文件及其子目录</span><span class="token function">rm</span> -rf /tmp/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>-f 删除前不提示用户确认，并忽略不存在的文件</li><li>-r 递归地删除目录及其下的内容</li></ul></blockquote><h3 id="7-ls-列出文件名和目录"><a href="#7-ls-列出文件名和目录" class="headerlink" title="7. ls - 列出文件名和目录"></a>7. ls - 列出文件名和目录</h3><p><code>ls</code>命令是<code>Linux</code>中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入<code>ls</code>命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。</p><p>以下便是<code>ls</code>命令及其选项的作用说明：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 仅列出当前目录下所有文件和目录</span><span class="token function">ls</span><span class="token comment"># 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等</span><span class="token function">ls</span> -l<span class="token comment"># 将文件大小显示符合人类阅读习惯的格式</span><span class="token function">ls</span> -lh<span class="token comment"># 将使用不同的特殊字符归类不同的文件类型</span><span class="token function">ls</span> -F<span class="token comment"># 以长列表格式列出某个目录的信息</span><span class="token function">ls</span> -ld /var/log<span class="token comment"># 将递归地列出子目录的内容</span><span class="token function">ls</span> -R /etc/sysconfig/<span class="token comment"># 以长列表格式按文件或目录的修改时间倒序地列出文件和目录</span><span class="token function">ls</span> -ltr<span class="token comment"># 以长列表格式按文件大小顺序列出文件和目录</span><span class="token function">ls</span> -ls<span class="token comment"># 列出包括隐藏文件或目录在内的所有文件和目录，包括“.”（当前目录）和“..”（父目录）</span><span class="token function">ls</span> -a<span class="token comment"># 列出包括隐藏文件或目录在内的所有文件和目录，不包括“.”（当前目录）和“..”（父目录）</span><span class="token function">ls</span> -A输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组<span class="token function">ls</span> -n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-cat-连接显示文件内容"><a href="#8-cat-连接显示文件内容" class="headerlink" title="8. cat - 连接显示文件内容"></a>8. cat - 连接显示文件内容</h3><p><code>cat</code>&nbsp;命令也是 Linux 系统中最常用的命令之一。<code>cat</code>命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。</p><p><code>cat</code>命令的语法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>cat</code>常用命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 cat 命令查看文件 /etc/group 的内容</span><span class="token function">cat</span> /etc/group<span class="token comment"># 显示多个文件的内容</span><span class="token function">cat</span> /etc/redhat-release /etc/issue<span class="token comment"># -n 选项，可以显示文件内容的行号</span><span class="token function">cat</span> -n /etc/fstab<span class="token comment"># -b 选项和 -n 选项类似，但只标识非空白行的行号</span><span class="token function">cat</span> -b /etc/fstab<span class="token comment"># -e 选项，将在每一行的结尾显示“$”字符</span><span class="token function">cat</span> -e /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。</p><p>dd</p></blockquote><h3 id="9-less、more-分屏显示文件"><a href="#9-less、more-分屏显示文件" class="headerlink" title="9.less、more - 分屏显示文件"></a>9.less、more - 分屏显示文件</h3><p><code>more</code>命令在你使用小的 xterm 窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more 命令是一个用于一次翻阅一整屏文件的过滤器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看一个文件，自动清空屏幕并显示文件开头部分</span><span class="token function">more</span> /etc/inittab<span class="token comment"># 指定一次显示num行</span><span class="token function">more</span> -num /etc/inittab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与<code>more</code>命令相比，我个人更喜欢<code>less</code>命令来查看文件。<code>less</code>命令与<code>more</code>命令类似，但<code>less</code>命令向前和向后翻页都支持，而且<code>less</code>命令不需要在查看前加载整个文件，即<code>less</code>命令查看文件更快速。</p><p><code>less</code>常用命令参数如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-b  <span class="token operator">&lt;</span>缓冲区大小<span class="token operator">&gt;</span> 设置缓冲区的大小-e  当文件显示结束后，自动离开-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件-g  只标志最后搜索的关键词-i  忽略搜索时的大小写-m  显示类似more命令的百分比-N  显示每行的行号-o  <span class="token operator">&lt;</span>文件名<span class="token operator">&gt;</span> 将less 输出的内容在指定文件中保存起来-Q  不使用警告音-s  显示连续空行为一行-S  行过长时间将超出部分舍弃-x  <span class="token operator">&lt;</span>数字<span class="token operator">&gt;</span> 将“tab”键显示为规定的数字空格/字符串：向下搜索“字符串”的功能?字符串：向上搜索“字符串”的功能n： 重复前一个搜索（与 / 或 ? 有关）N： 反向重复前一个搜索（与 / 或 ? 有关）b  向后翻一页d  向后翻半页h  显示帮助界面Q  退出less 命令u  向前滚动半页y  向前滚动一行空格键 滚动一行回车键 滚动一页<span class="token punctuation">[</span>pagedown<span class="token punctuation">]</span>： 向下翻动一页<span class="token punctuation">[</span>pageup<span class="token punctuation">]</span>：   向上翻动一页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-head-显示文件头部"><a href="#10-head-显示文件头部" class="headerlink" title="10.head - 显示文件头部"></a>10.head - 显示文件头部</h3><p><code>head</code>命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前 10 行内容。</p><p>使用<code>-n</code>选项可以指定打印文件的前 N 行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定打印文件的前5行</span><span class="token function">head</span> -n <span class="token number">5</span> /etc/inittab（或）head -5 /etc/inittab<span class="token comment"># 打印文件的前N个字节的数据</span><span class="token function">head</span> -c <span class="token number">10</span> /etc/inittab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-tail-显示文件尾部"><a href="#11-tail-显示文件尾部" class="headerlink" title="11.tail - 显示文件尾部"></a>11.tail - 显示文件尾部</h3><p><code>tail</code>命令和<code>head</code>命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后 10 行内容。</p><p>使用<code>-n</code>选项可以指定打印文件的最后 N 行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定打印文件的后10行</span><span class="token function">tail</span> -n <span class="token number">10</span> /etc/inittab<span class="token function">tail</span> -10 /etc/inittab<span class="token comment"># 即时打印文件中新写入的行</span><span class="token function">tail</span> -f /var/log/messages<span class="token comment"># --retry选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件</span><span class="token function">tail</span> -f /tmp/debug.log --retry<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-file-查看文件类型"><a href="#12-file-查看文件类型" class="headerlink" title="12.file - 查看文件类型"></a>12.file - 查看文件类型</h3><p><code>file</code>命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看文件类型</span><span class="token function">file</span> /etc/inittab<span class="token comment"># 可以MIME类型的格式显示文件类型的信息</span><span class="token function">file</span> -i  /etc/inittab<span class="token comment"># 使用-N 选项，输出的队列可以以在文件名之后无空白填充的形式显示</span><span class="token function">file</span> -N *<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-wc-查看文件统计信息"><a href="#13-wc-查看文件统计信息" class="headerlink" title="13.wc - 查看文件统计信息"></a>13.wc - 查看文件统计信息</h3><p><code>wc</code>命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> filenameX Y Z /etc/inittab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中 X 表示行数，Y 表示单词数，Z 表示字节数，filename 表示文件名。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -l选项，可以只统计文件的行数信息</span><span class="token function">wc</span> -l /etc/inittab<span class="token comment"># -w选项，可以只统计文件的单词数信息</span><span class="token function">wc</span> -w /etc/inittab<span class="token comment"># -c选项，可以只统计文件的字节数信息</span><span class="token function">wc</span> -c /etc/inittab<span class="token comment"># -L选项，可以只统计文件中最长的行的长度</span><span class="token function">wc</span> -L /etc/inittab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-find-查找文件或目录"><a href="#14-find-查找文件或目录" class="headerlink" title="14.find - 查找文件或目录"></a>14.find - 查找文件或目录</h3><p><code>find</code>命令用于根据你指定的参数搜索和定位文件和目录的列表。<code>find</code>命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。</p><p><code>find</code>命令常用使用和说明如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找指定目录下的某个文件</span><span class="token function">find</span> /etc/ -name inittab<span class="token comment"># 在当前目录下查找名称为 inittab 的文件</span><span class="token function">find</span> <span class="token builtin class-name">.</span> -name inittab<span class="token comment"># 在当前目录下，文件不区分大小写是example的所有文件</span><span class="token function">find</span> <span class="token builtin class-name">.</span> -iname example<span class="token comment"># 找出当前目录下所有以 sh 结尾的文件</span><span class="token function">find</span> <span class="token builtin class-name">.</span> -type f -name <span class="token string">"*.sh"</span><span class="token comment"># 找出当前目录下，文件权限是 777 的所有文件</span><span class="token function">find</span> <span class="token builtin class-name">.</span> -type f -perm <span class="token number">777</span><span class="token comment"># 找出当前目录下，文件权限不是 777 的所有文件</span><span class="token function">find</span> <span class="token builtin class-name">.</span> -type f <span class="token operator">!</span> -perm <span class="token number">777</span><span class="token comment"># 找出当前目录下所有只读文件</span><span class="token function">find</span> <span class="token builtin class-name">.</span> -type f <span class="token operator">!</span> -perm /a+w<span class="token comment"># 找出你帐号主目录下的所有可执行文件</span><span class="token function">find</span> ~ -type f -perm /a+w<span class="token comment"># 找出 /tmp 目录下的.log文件并将其删除：</span><span class="token function">find</span> /tmp/ -type f -name <span class="token string">"*.log"</span> -exec <span class="token function">rm</span> -f <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token comment"># 找出当前目录下的所有空文件</span><span class="token function">find</span> <span class="token builtin class-name">.</span> -type f -empty<span class="token comment"># 找出当前目录下的所有空目录</span><span class="token function">find</span> <span class="token builtin class-name">.</span> -type d -empty<span class="token comment"># 找出 /tmp 目录下的所有隐藏文件</span><span class="token function">find</span> /tmp/ -type f -name <span class="token string">".*"</span><span class="token comment"># 找出 /tmp 目录下，所有者是 root 的文件和目录</span><span class="token function">find</span> /tmp/ -user root<span class="token comment"># 找出 /tmp 目录下，用户组是 developer 的文件和目录</span><span class="token function">find</span> /tmp/ -group root<span class="token comment"># 找出你账号的主目录下，3 天前修改的文件</span><span class="token function">find</span> ~ -type f -mtime <span class="token number">3</span><span class="token comment"># 找出你账号的主目录下，30 天以前修改的所有文件</span><span class="token function">find</span> ~ -type f -mtime +30<span class="token comment"># 找出你账号的主目录下，3 天以内修改的所有文件</span><span class="token function">find</span> ~ -type f -mtime -3<span class="token comment"># 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件</span><span class="token function">find</span> ~ -type f -mtime +30 -mtime -60<span class="token comment"># 找出 /etc 目录下，一小时以内变更过的文件</span><span class="token function">find</span> /etc -type f -cmin -60<span class="token comment"># 找出 /etc 目录下，一小时以内访问过的文件</span><span class="token function">find</span> /etc -type f -amin -60<span class="token comment"># 找出你账号主目录下，大小是50MB的所有文件</span><span class="token function">find</span> ~ -type f -size 50MB<span class="token comment"># 找出你账号主目录下，大于50MB小于100MB的所有文件</span><span class="token function">find</span> ~ -type f -size +50MB -size -100MB<span class="token comment"># 找出你账号主目录下，大于100MB的文件并将其删除</span><span class="token function">find</span> ~ -type f -size +100MB -exec <span class="token function">rm</span> -rf <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、文本处理"><a href="#三、文本处理" class="headerlink" title="三、文本处理"></a>三、文本处理</h2><h3 id="1-sort-文本排序"><a href="#1-sort-文本排序" class="headerlink" title="1. sort - 文本排序"></a>1. sort - 文本排序</h3><p><code>sort</code>命令用于将文本文件的行排序。默认情况下，<code>sort</code>命令是按照字符串的字母顺序排序。</p><p>sort 的常用命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将文本内容按字母顺序排序</span><span class="token function">sort</span> example.txt<span class="token comment"># 使用 -u 选项，移除所有重复行后排序</span><span class="token function">sort</span> -u example.txt<span class="token comment"># 使用 -n 选项，将令数字按数值的大小排序</span><span class="token function">sort</span> -n example.txt<span class="token comment"># 使用 -r 选项，以倒序方式排序</span><span class="token function">sort</span> -n -r example.txt<span class="token comment"># 同时将 file1、file2 的内容排序</span><span class="token function">sort</span> file1 file2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-uniq-文本去重"><a href="#2-uniq-文本去重" class="headerlink" title="2.uniq - 文本去重"></a>2.uniq - 文本去重</h3><p><code>uniq</code>命令用于移除或发现文件中重复的条目。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 它将移除文件中重复的行并显示单一行</span><span class="token function">uniq</span> example.txt<span class="token comment"># 可以统计重复行出现的次数</span><span class="token function">uniq</span> -c example.txt<span class="token comment"># 使用 -d 选项，只显示文件中有重复的行并只显示一次</span><span class="token function">uniq</span> -d example.txt<span class="token comment"># 使用 -D 选项，显示文件中所有重复的行</span><span class="token function">uniq</span> -D example.txt<span class="token comment"># 使用 -u 选项，只显示文件中不重复的行</span><span class="token function">uniq</span> -u example.txt<span class="token comment"># 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复</span><span class="token function">uniq</span> -w <span class="token number">3</span> example.txt<span class="token comment"># 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复</span><span class="token function">uniq</span> -s <span class="token number">3</span> example.txt<span class="token comment"># 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复</span><span class="token function">uniq</span> -f <span class="token number">1</span> example.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-tr-替换或删除字符"><a href="#3-tr-替换或删除字符" class="headerlink" title="3.tr - 替换或删除字符"></a>3.tr - 替换或删除字符</h3><p><code>tr</code>命令主要用于删除文件中控制字符或进行字符转换。使用<code>tr</code>时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。<code>tr</code>刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。</p><p><code>tr</code>命令的语法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tr</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. SET1 <span class="token punctuation">[</span>SET2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用命令示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 若要将大括号转换为小括号</span><span class="token function">tr</span> <span class="token string">'{}'</span> <span class="token string">'()'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">&gt;</span> newfile<span class="token comment"># 若要将大括号转换成方括号</span><span class="token function">tr</span> <span class="token string">'{}'</span> <span class="token string">'\[]'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">&gt;</span> newfile<span class="token comment"># 若要将小写字符转换成大写，请输入：</span><span class="token function">tr</span> <span class="token string">'a-z'</span> <span class="token string">'A-Z'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">&gt;</span> newfile<span class="token comment"># 若要创建一个文件中的单词列表</span><span class="token function">tr</span> -cs <span class="token string">'[:lower:][:upper:]'</span> <span class="token string">'[\n*]'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">&gt;</span> newfile<span class="token comment"># 若要从某个文件中删除所有空字符</span><span class="token function">tr</span> -d <span class="token string">'\0'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">&gt;</span> newfile<span class="token comment"># 若要用单独的换行替换每一序列的一个或多个换行，请输入：</span><span class="token function">tr</span> -s <span class="token string">'\n'</span> <span class="token operator">&lt;</span> textfile <span class="token operator">&gt;</span> newfile<span class="token comment"># 要以单个“#”字符替换 &lt;space&gt; 字符类中的每个字符序列</span><span class="token function">tr</span> -s <span class="token string">'[:space:]'</span> <span class="token string">'[#*]'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-grep-查找字符串"><a href="#4-grep-查找字符串" class="headerlink" title="4.grep - 查找字符串"></a>4.grep - 查找字符串</h3><p><code>grep</code>命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，<code>grep</code>命令只显示匹配的行。</p><p><code>grep</code>命令的语法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. PATTERN <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span class="token function">grep</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. <span class="token punctuation">[</span>-e PATTERN <span class="token operator">|</span> -f FILE<span class="token punctuation">]</span> <span class="token punctuation">[</span>FILE<span class="token punctuation">]</span><span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息</span><span class="token function">grep</span> blinkfox /etc/passwd<span class="token comment"># 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写</span><span class="token function">grep</span> -i blinkfox /etc/passwd<span class="token comment"># 使用 -r 选项，可以递归搜索指定目录下的所有文件</span><span class="token function">grep</span> -r blinkfox /etc/<span class="token comment"># 使用 -w 选项，只匹配包含指定单词的行</span><span class="token function">grep</span> -w blinkfox /etc/<span class="token comment"># 使用 -c 选项，报告文件或文本中模式被匹配的次数</span><span class="token function">grep</span> -c blinkfox /etc/passwd<span class="token comment"># 使用 -n 选项，显示每一个匹配的行的行号</span><span class="token function">grep</span> -n blinkfox /etc/passwd<span class="token comment"># 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行</span><span class="token function">grep</span> -v blinkfox /etc/passwd<span class="token comment"># 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出</span><span class="token function">grep</span> --color blinkfox /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-diff-比较两个文件"><a href="#5-diff-比较两个文件" class="headerlink" title="5.diff - 比较两个文件"></a>5.diff - 比较两个文件</h3><p><code>diff</code>命令用于比较两个文件，并找出它们之间的不同。<code>diff</code>命令的语法如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">diff</span> <span class="token punctuation">[</span>OPTION<span class="token punctuation">]</span><span class="token punctuation">..</span>. from-file to-file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用使用方式如下：</p><pre><code># 比较两个文件diff nsswitch.conf nsswitch.conf.org# 使用 -w 选项，比较时忽略空格diff -w nsswitch.conf nsswitch.conf.org# 使用 -y 选项，以并排的格式输出两个文件的比较结果diff -y nsswitch.conf nsswitch.conf.org使用 -c 选项，以上下对比的格式输出两个文件的比较结果diff -c nsswitch.conf nsswitch.conf.org</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三万字教程基于Hexo的matery主题搭建博客并深度优化一站式完全教程_</title>
      <link href="/2022/08/08/hexo-matery-zhu-ti-jiao-cheng/"/>
      <url>/2022/08/08/hexo-matery-zhu-ti-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>All in one 一站式Hexo配置优化教程！</p><ul><li>本文很长，特别长，快卡死编辑器了，如是被拆分为6篇文章了，见文末链接。</li><li>如果你遇到了什么问题，可以尝试搜索本文，你很可能有收获！&nbsp;<code>CtRL + F</code>，还可以试试右上角菜单搜索功能。</li><li>欢迎光临博主的独立博客&nbsp;<a href="https://blog.17lai.site/">夜法之书</a>，本文授权<code>CC4.0</code>非商用，转载请注明出处</li><li>本文就教你搭建一个美观实用的博客系统，步骤极尽详细！</li><li>本文中提到的大量特性，已经被博主提交到<a href="https://github.com/blinkfox/hexo-theme-matery">matery</a>主题develop分支，提交记录见<a href="https://github.com/blinkfox/hexo-theme-matery/commits?author=appotry">Commit</a>。所以下面很多特性已经不用自己修改了，可以直接使用。</li><li>参考列表放到了最后一篇末尾，去找找看，里面能发现很多好东西。</li><li>Tips：友情提示，部分内容RSS输出获取不到，请跳转到源网页地址浏览全文！</li></ul></blockquote><h2 id="选择Hexo的理由？"><a href="#选择Hexo的理由？" class="headerlink" title="选择Hexo的理由？"></a><strong>选择Hexo的理由</strong>？</h2><blockquote><ul><li>Hexo创建者是台湾人，对中文支持很友好！</li><li>Hexo开源，方便学习和修改</li><li>Hexo生态非常完善，各种插件极其丰富！而且基本全部免费、开源！</li><li>Hexo对Markdown支持非常完善，对比遍各种博客框架，hexo对Markdown支持最友好</li><li>Hexo静态部署，不需要php,java之类的运行环境，方便各种部署环境。不需要购买vps,就有各种免费的部署环境！最低0成本建立独立博客！</li></ul></blockquote><h2 id="写博客的重要性"><a href="#写博客的重要性" class="headerlink" title="写博客的重要性"></a>写博客的重要性</h2><blockquote><p>最终效果如下图所示！</p><ul><li>支持离线访问。</li><li>支持浅色/深色模式。</li><li>支持文章RSS订阅，并支持文章分类订阅。</li><li>看板娘文字功能提示。</li><li>支持新博文订阅通知，右下角小铃铛点击订阅！&nbsp;<u>chrome用户可能由于网络原因链接不到Google的服务器而看不到这个小铃铛</u>。edge 和 Firefox 用户可以正常订阅。</li></ul></blockquote><p><img src="https://cimg1.17lai.site/data/2022/03/2720220327072647.png" alt="支持离线模式"></p><p><strong>支持离线模式</strong></p><blockquote><p>service worker 实现的渐进式App，不仅可以离线浏览，还可以加速缓存访问！</p></blockquote><p><img src="https://cimg1.17lai.site/data/2022/03/2720220327072647-1.png" alt="博客深色模式"></p><p><strong>博客深色模式</strong></p><blockquote><p>深色模式，夜晚保护您的视力！</p></blockquote><p><img src="https://cimg1.17lai.site/data/2022/03/2720220327072844.png" alt="RSS订阅与文章分类订阅"></p><p><strong>RSS订阅与文章分类订阅</strong></p><blockquote><p>RSS Hub 和 TTRSS 私有部署实现订阅。</p><p>配合浏览器扩展&nbsp;<a href="https://github.com/DIYgod/RSSHub-Radar">RSSHub Radar (opens new window)</a>和 移动端辅助 App&nbsp;<a href="https://github.com/Cay-Zhang/RSSBud">RSSBud (opens new window)</a>(iOS) 与&nbsp;<a href="https://github.com/LeetaoGoooo/RSSAid">RSSAid (opens new window)</a>(Android) 食用。</p><p>教程：<a href="https://blog.17lai.site/posts/f4926c88/">RSS的使用与Tiny Tiny RSS Selfhost自建</a></p></blockquote><p><img src="https://cimg1.17lai.site/data/2022/03/2920220329182729.png" alt="看板娘触发文字提示"></p><p><strong>看板娘触发文字提示</strong></p><blockquote><ul><li>对所有菜单和常用按钮做了文字功能提示。</li><li>支持看板娘模型切换，服装切换，某些模型还有语音互动！</li><li>看板娘还可以自定义时间提示，特殊节日提示等等。参考&nbsp;<a href="https://blog.17lai.site/posts/4a2050e2/">Hexo博客个性定制篇</a>中来完成吧。</li></ul></blockquote><p><img src="https://cimg1.17lai.site/data/2022/04/0220220402074306.png" alt="博客性能优化"></p><p><strong>博客性能优化</strong></p><blockquote><p>经过多次优化，新版看板娘资源异步加载体积大拖累的性能分数。其它几乎都是满分了！</p><p>大量使用本地缓存，牺牲了第一次加载的体积，保证了第二次打开几乎都是使用缓存，异步加载对第一次渲染速度影响不大，但可以极大的提高第二次来自后续的访问速度！</p></blockquote><p><strong>Hexo系列</strong>&nbsp;<a href="https://blog.17lai.site/categories/hexo/atom.xml"><strong>HexoRSS分类订阅</strong></a></p><p>[三万字教程]基于Hexo的matery主题搭建博客并深度优化完全一站式教程</p><ul><li><p><a href="https://blog.17lai.site/posts/40300608/">Hexo Docker环境与Hexo基础配置篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/4d8a0b22/">hexo博客自定义修改篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/9b056c86/">hexo博客网络优化篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/5311b619/">hexo博客增强部署篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/4a2050e2/">hexo博客个性定制篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/84b4059a/">hexo博客常见问题篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/cf0f47fd/">Hexo Markdown以及各种插件功能测试</a></p></li></ul><blockquote><ul><li>markdown 各种其它语法插件</li><li>latex公式支持</li><li>mermaid图表</li><li>plant uml图表</li><li>URL卡片</li><li>bilibili卡片</li><li>github卡片</li><li>豆瓣卡片</li><li>插入音乐和视频</li><li>插入脑图</li></ul></blockquote><h2 id="Hexo-Docker环境使用篇"><a href="#Hexo-Docker环境使用篇" class="headerlink" title="Hexo Docker环境使用篇"></a>Hexo Docker环境使用篇</h2><h3 id="Docker-简介："><a href="#Docker-简介：" class="headerlink" title="Docker 简介："></a>Docker 简介：</h3><blockquote><p>Docker 是一种轻量级的虚拟机环境，可以隔离主机的运行环境，内核公用主机的，运行库和环境是 Docker 私有的。运行 Docker 程序只比主机直接运行程序性能损失微乎其微。使用 Docker 你可以同时运行各种各样运行库环境而不用担心搞乱你的主机运行库环境！</p><p>Docker 运行负载远小于 Vmware 这类虚拟机， Vmware 需要模拟对应的CPU指令，再虚机运行一个虚拟机自己的内核，再这个虚拟机内核之上，再运行虚拟机的运行库和程序。比 Docker 多了一个内核模拟和运行，Cpu 和内存开销大增！</p></blockquote><h3 id="Docker-版-hexo-环境一键部署"><a href="#Docker-版-hexo-环境一键部署" class="headerlink" title="Docker 版 hexo 环境一键部署"></a>Docker 版 hexo 环境一键部署</h3><blockquote><p>博主开源定制，推荐使用！省去您大量环境配置时间。</p><p>使用Hexo Docker之前需要Docker 环境，请参阅后文Docker安装方法</p><ul><li><a href="https://hub.docker.com/r/bloodstar/hexo">docker-hub</a></li><li><a href="https://github.com/appotry/docker-hexo">Github-hexo</a></li></ul></blockquote><p>使用推荐Docker来搭配本文，阅读使用，将更省事，方便，快捷。hexo环境一键搞定！</p><p>Docker一键安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> create --name<span class="token operator">=</span>hexo <span class="token punctuation">\</span>-e <span class="token assign-left variable">HEXO_SERVER_PORT</span><span class="token operator">=</span><span class="token number">4000</span> <span class="token punctuation">\</span>-e <span class="token assign-left variable">GIT_USER</span><span class="token operator">=</span><span class="token string">"17lai"</span> <span class="token punctuation">\</span>-e <span class="token assign-left variable">GIT_EMAIL</span><span class="token operator">=</span><span class="token string">"17lai@domain.tld"</span> <span class="token punctuation">\</span>-v /mnt/blog.17lai.site:/app <span class="token punctuation">\</span>-p <span class="token number">4000</span>:4000 <span class="token punctuation">\</span>bloodstar/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hexo-web-后台写作"><a href="#hexo-web-后台写作" class="headerlink" title="hexo web 后台写作"></a>hexo web 后台写作</h3><blockquote><p>基于&nbsp;<strong><a href="https://github.com/jaredly/hexo-admin">hexo-admin</a></strong>&nbsp;实现，具体配置实现方法见<a href="https://blog.17lai.site/posts/40300608/">后文</a>。</p><p>最终效果如下图所示。<code>blog.17lai.fun</code>&nbsp;访问<code>blog</code>， 添加后缀&nbsp;<code>admin</code>&nbsp;访问&nbsp;<code>hexo</code>&nbsp;后台。</p><p>使用前面提到的 hexo docker ，启动运行 hexo docker 后，非自动安装 hexo-admin 以及常用插件，你也可以自定义安装你虚幻的插件，&nbsp;<code>vi /app/useRun.sh</code>。</p></blockquote><p><img src="https://cimg1.17lai.site/data/2022/03/2620220326133730.png" alt="hexo-admin 主界面"></p><p><strong>hexo-admin 主界面</strong></p><p><img src="https://cimg1.17lai.site/data/2022/03/2620220326133825.png" alt="hexo-admin 编辑写作界面"></p><p><strong>hexo-admin 编辑写作界面</strong></p><p>配置 hexo-admin 根目录下<code>_config.yml</code>:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">admin</span><span class="token punctuation">:</span>  <span class="token key atrule">username</span><span class="token punctuation">:</span> myfavoritename <span class="token comment">#用户名</span>  <span class="token key atrule">password_hash</span><span class="token punctuation">:</span> be121740bf988b2225a313fa1f107ca1 <span class="token comment">#密码</span>  <span class="token key atrule">secret</span><span class="token punctuation">:</span> a secret something <span class="token comment"># secret is used to make the cookies secure</span>  <span class="token key atrule">deployCommand</span><span class="token punctuation">:</span> <span class="token string">'/app/tools/cide.sh'</span>  <span class="token comment"># 自定义的部署脚本，在 hexo admin 的 deploy 标签页 deploy 按钮点击调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 post metadata 根目录下<code>_config.yml</code>:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># add and edit your own post metadata with the admin interface</span><span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">author_id</span><span class="token punctuation">:</span> defaultAuthorId  language<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hexon"><a href="#hexon" class="headerlink" title="hexon"></a>hexon</h3><blockquote><p>Github:&nbsp;<a href="https://github.com/gethexon/hexon">hexon</a></p><p>另一个hexo web 编辑界面，界面比hexo-admin更现代化。安装配置方法见<a href="https://github.com/gethexon/hexon">Github</a></p></blockquote><p><img src="https://cimg1.17lai.site/data/2022/05/29/20220529214918.webp" alt="hexon"></p><p><strong>hexon</strong></p><h3 id="ssh-key-部署"><a href="#ssh-key-部署" class="headerlink" title="ssh key 部署"></a>ssh key 部署</h3><p><strong>Docker会自动随机生成ssh key</strong>&nbsp;在 /app/.ssh 目录下面。自动部署请把ssh key添加到github 等平台。</p><p><a href="https://docs.github.com/cn/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account">Github详细教程</a></p><blockquote><ol><li>将<strong>SSH</strong>&nbsp;公钥复制到剪贴板。 …</li><li>在任何页面的右上角，单击您的个人资料照片，然后单击Settings（设置）。</li><li>在用户设置侧边栏中，单击<strong>SSH</strong>&nbsp;and GPG keys（<strong>SSH</strong>&nbsp;和GPG 密钥）。</li><li>单击New&nbsp;<strong>SSH</strong>&nbsp;key（新<strong>SSH</strong>&nbsp;密钥）或Add&nbsp;<strong>SSH</strong>&nbsp;key（添加<strong>SSH</strong>&nbsp;密钥）。</li></ol></blockquote><h3 id="SSH-进入docker"><a href="#SSH-进入docker" class="headerlink" title="SSH 进入docker"></a>SSH 进入docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it hexo /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后就可以正常运行hexo的各种命令了，是不是非常简单？ 快来试试吧。</p><h3 id="远程-SSH-访问Docker"><a href="#远程-SSH-访问Docker" class="headerlink" title="远程 SSH 访问Docker"></a>远程 SSH 访问Docker</h3><blockquote><p>推荐使用<code>SecurtCRT</code>&nbsp;来远程访问你的<code>Docker</code>。</p></blockquote><p><img src="https://cimg1.17lai.site/data/2022/03/2620220326140201.png" alt="SecurtCRT"></p><p><strong>SecurtCRT</strong></p><h3 id="自定义用户自动运行脚本"><a href="#自定义用户自动运行脚本" class="headerlink" title="自定义用户自动运行脚本"></a>自定义用户自动运行脚本</h3><blockquote><p>用户可以在这里添加自动配置，自动安装插件，等各种启动docker运行的命令。</p><p>它将在Docker启动完成后自动调用运行！</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /app/useRun.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="反向代理-Hexo-Docker"><a href="#反向代理-Hexo-Docker" class="headerlink" title="反向代理 Hexo Docker"></a>反向代理 Hexo Docker</h3><blockquote><p><em>Nginx</em>&nbsp;(engine x) 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务。</p><ul><li><p>一些测试可能需要ssl支持，那么用nginx来反向代理一下，就可以在本地愉快的测试ssl加密功能了。</p></li><li><p>访问docker，需要&nbsp;<code>192.168.0.100:4000</code>这样数字<code>ip + 端口号</code>的方式不觉得很丑陋，而且需要开大量的端口，使用nginx反向代理，可以直接使用域名访问。</p></li><li><p>如果你想使用<code>blog.17lai.fun</code>这样的域名访问你的 docker 里面运行的博客，请参考下文。</p></li></ul></blockquote><p>Nginx也使用docker来运行，<code>blog.17lai.fun</code>为本地域名，修改本地hosts dns信息来访问。</p><h4 id="docker-compose-配置"><a href="#docker-compose-配置" class="headerlink" title="docker compose 配置"></a>docker compose 配置</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">nginxweb</span><span class="token punctuation">:</span>  <span class="token key atrule">image</span><span class="token punctuation">:</span> bloodstar/nginx<span class="token punctuation">-</span>purge  <span class="token key atrule">container_name</span><span class="token punctuation">:</span> <span class="token string">"nginxweb"</span>  <span class="token key atrule">hostname</span><span class="token punctuation">:</span> nginxweb  <span class="token key atrule">ports</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token string">"80:80"</span>    <span class="token punctuation">-</span> <span class="token string">"443:443"</span>  <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token comment"># ${USERDIR}为你docker运行目录</span>    <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/nginx/conf.d<span class="token punctuation">:</span>/etc/nginx/conf.d<span class="token punctuation">:</span>ro    <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/nginxproxy/certs<span class="token punctuation">:</span>/etc/nginx/certs<span class="token punctuation">:</span>ro    <span class="token punctuation">-</span> $<span class="token punctuation">{</span>USERDIR<span class="token punctuation">}</span>/nginx/nginx.conf<span class="token punctuation">:</span>/etc/nginx/nginx.conf<span class="token punctuation">:</span>ro<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><a href="https://hub.docker.com/r/bloodstar/nginx-purge">bloodstar/nginx-purge</a></li></ul><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><p>文件&nbsp;<code>blog.conf</code>&nbsp;，配置文件放到<code>${USERDIR}/nginx/conf.d</code>目录中</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> blog</span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">server</span> hexo:4000</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl http2</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>  blog.17lai.fun</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/nginx/certs/17lai.pem</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/nginx/certs/17lai.key</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_session_cache</span> shared:aria2SSL:10m</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_session_timeout</span>  <span class="token number">30m</span></span><span class="token punctuation">;</span>    <span class="token comment">#ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span>    <span class="token directive"><span class="token keyword">ssl_ciphers</span> EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1 TLSv1.1 TLSv1.2</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span> /var/log/nginx/blog.17lai.fun_access.log combined</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_log</span>  /var/log/nginx/blog.17lai.fun_error.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">keepalive_requests</span> <span class="token number">10000</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token comment">#proxy_redirect off;</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://blog</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_buffering</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">add_header</span> X-Cache-Status <span class="token variable">$upstream_cache_status</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-Proto <span class="token variable">$scheme</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span>  X-Forwarded-Ssl     <span class="token boolean">on</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span>  X-Forwarded-For     <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>              <span class="token directive"><span class="token keyword">proxy_set_header</span>  X-Frame-Options     SAMEORIGIN</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Windows-DNS修改"><a href="#Windows-DNS修改" class="headerlink" title="Windows DNS修改"></a>Windows DNS修改</h4><p>windows hosts文件路径为：&nbsp;<code>C:\Windows\System32\drivers\etc\HOSTS</code></p><p>管理员权限用文本编辑器打开这个文件并添加&nbsp;<code>192.168.0.100 blog.17lai.fun</code>，然后，你就可以在本地浏览器中使用域名访问你的blog了！</p><h4 id="Linux-DNS-修改"><a href="#Linux-DNS-修改" class="headerlink" title="Linux DNS 修改"></a>Linux DNS 修改</h4><p>Linux hosts 文件路径为：&nbsp;<code>/etc/hosts</code></p><p>用文本编辑器或者命令行工具<code>vim</code>打开这个文件并添加&nbsp;<code>192.168.0.100 blog.17lai.fun</code>，然后，你就可以在本地浏览器中使用域名访问你的blog了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># root用户一条指令搞定</span><span class="token builtin class-name">echo</span> <span class="token string">"192.168.0.100 blog.17lai.fun"</span> <span class="token operator">&gt;&gt;</span> /etc/hosts<span class="token comment">#或者使用 vi 或者 vim</span><span class="token function">vi</span> /etc/hosts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取-SSL-证书"><a href="#获取-SSL-证书" class="headerlink" title="获取 SSL 证书"></a>获取 SSL 证书</h4><blockquote><ul><li>如果你购买了域名，可以在域名服务商获得免费的ssl证书。</li><li>自己生成<u><em>私有证书</em></u>，使用时需要给本地计算机，浏览器添加你自己的根证书，才能使你的ssl 证书在你自己的浏览器中生效。</li></ul></blockquote><blockquote><p>使用Hexo Docker之前需要Docker 环境，下面是Docker 环境安装方法。</p></blockquote><h3 id="Centos-安装Docker"><a href="#Centos-安装Docker" class="headerlink" title="Centos 安装Docker"></a><strong>Centos 安装Docker</strong></h3><p><strong>X86</strong>（一键安装脚本）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -sSL https://get.docker.com/ <span class="token operator">|</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Arm</strong>：</p><p>步骤1</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>步骤2</p><p>添加仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>步骤3</p><p>安装Docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2022/03/2420220324173951.png" alt="centos docker"></p><p><strong>centos docker</strong></p><p><img src="https://cimg1.17lai.site/data/2022/03/2420220324173951-1.png" alt="centos docker"></p><p><strong>centos docker</strong></p><p>完成安装</p><p>步骤4</p><p>启动Docker</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="QNAP-安装Docker"><a href="#QNAP-安装Docker" class="headerlink" title="QNAP 安装Docker"></a>QNAP 安装Docker</h3><blockquote><p>在系统应用的AppCenter中找到 Container Station，可以直接点击安装即可。</p></blockquote><p><img src="https://cimg1.17lai.site/data/2022/03/2620220326110013.png" alt="qnap docker"></p><p><strong>qnap docker</strong></p><h3 id="群晖-安装-Docker"><a href="#群晖-安装-Docker" class="headerlink" title="群晖 安装 Docker"></a>群晖 安装 Docker</h3><p>首先要说的是，x86 平台的群晖才能用的上&nbsp;<code>Docker</code>&nbsp;套件，因此，ARM 架构平台的群晖只能说非常遗憾了。<br>　　打开套件中心，在 “所有套件” 中找到&nbsp;<code>Docker</code>&nbsp;并安装：</p><p><img src="https://cimg1.17lai.site/data/2022/03/2620220326111828.png" alt="群晖 Docker"></p><p><strong>群晖 Docker</strong></p><h2 id="Hexo入门篇"><a href="#Hexo入门篇" class="headerlink" title="Hexo入门篇"></a>Hexo入门篇</h2><h3 id="Hexo-通用简明教程"><a href="#Hexo-通用简明教程" class="headerlink" title="Hexo 通用简明教程"></a>Hexo 通用简明教程</h3><p><a href="https://hexo.io/zh-cn/">Hexo</a>&nbsp;是一个快速、简洁且高效的博客框架。Hexo 使用&nbsp;<a href="https://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="https://nodejs.org/">Node.js</a>&nbsp;(Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="https://git-scm.com/">Git</a></li><li><a href="https://www.npmjs.com/">nmp</a></li></ul><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装以后，可以使用以下两种方式执行 Hexo：</p><ol><li><code>npx hexo</code></li><li>将 Hexo 所在的目录下的&nbsp;<code>node_modules</code>&nbsp;添加到环境变量之中即可直接使用：&nbsp;<code>hexo</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'PATH="$PATH:./node_modules/.bin"'</span> <span class="token operator">&gt;&gt;</span> ~/.profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h4><p>后期需要升级的化，进入 blog 目录，先检查更新:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> outdatedPackage                  Current  Wanted  Latest  Locationhexo                       <span class="token number">3.9</span>.0   <span class="token number">3.9</span>.0   <span class="token number">4.2</span>.0  hexo-sitehexo-deployer-git          <span class="token number">1.0</span>.0   <span class="token number">1.0</span>.0   <span class="token number">2.1</span>.0  hexo-sitehexo-generator-archive     <span class="token number">0.1</span>.5   <span class="token number">0.1</span>.5   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-category    <span class="token number">0.1</span>.3   <span class="token number">0.1</span>.3   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-feed        <span class="token number">1.2</span>.2   <span class="token number">1.2</span>.2   <span class="token number">2.2</span>.0  hexo-sitehexo-generator-index       <span class="token number">0.2</span>.1   <span class="token number">0.2</span>.1   <span class="token number">1.0</span>.0  hexo-sitehexo-generator-tag         <span class="token number">0.2</span>.0   <span class="token number">0.2</span>.0   <span class="token number">1.0</span>.0  hexo-sitehexo-renderer-ejs          <span class="token number">0.3</span>.1   <span class="token number">0.3</span>.1   <span class="token number">1.0</span>.0  hexo-sitehexo-renderer-marked       <span class="token number">0.3</span>.2   <span class="token number">0.3</span>.2   <span class="token number">2.0</span>.0  hexo-sitehexo-renderer-stylus       <span class="token number">0.3</span>.3   <span class="token number">0.3</span>.3   <span class="token number">1.1</span>.0  hexo-sitehexo-server                <span class="token number">0.3</span>.3   <span class="token number">0.3</span>.3   <span class="token number">1.0</span>.0  hexo-site<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改&nbsp;<code>package.json</code>&nbsp;文件，基于&nbsp;<code>Latest</code>&nbsp;列内容更新版本号，然后更新并检查版本号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save<span class="token comment"># 检查版本号</span>$ hexo -vhexo: <span class="token number">4.2</span>.0hexo-cli: <span class="token number">3.1</span>.0<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo init <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token builtin class-name">cd</span> <span class="token operator">&lt;</span>folder<span class="token operator">&gt;</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="启动网页服务"><a href="#启动网页服务" class="headerlink" title="启动网页服务"></a>启动网页服务</h4><p>此时，通过&nbsp;<code>hexo s</code>&nbsp;命令即可在本地启动您的博客站点了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000 <span class="token builtin class-name">.</span> Press Ctrl+C to stop.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>接下来将安装主题，配置博客托管平台，实现一键发布并刷新 CDN 缓存。</p><h3 id="npm下载加速"><a href="#npm下载加速" class="headerlink" title="npm下载加速"></a>npm下载加速</h3><h4 id="安装淘宝镜像，-加速NPM"><a href="#安装淘宝镜像，-加速NPM" class="headerlink" title="安装淘宝镜像， 加速NPM"></a>安装淘宝镜像， 加速NPM</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry http://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="安装CNPM"><a href="#安装CNPM" class="headerlink" title="安装CNPM"></a>安装CNPM</h4><blockquote><p>个人使用体验来说，<code>npm</code>兼容性最好，如果你遇到某个包<code>cnpm</code>或者<code>yarn</code>安装失败，试试最原始的老婆吗，或许有奇效！</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>http://registry.npmmirror.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Hexo-日常操作命令"><a href="#Hexo-日常操作命令" class="headerlink" title="Hexo 日常操作命令"></a>Hexo 日常操作命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入hexo docker 环境。需要你已经安装了docker环境，并安装了上文提到的hexo docker</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it hexo /bin/bash<span class="token comment"># 运行完这条命令后，你就发现命令提示符变了，你此时进入了一个独立于你的主机运行环境的新的 node + hexo 开发环境了。</span><span class="token comment"># 生成新页面 404</span>hexo new page <span class="token number">404</span><span class="token comment"># 新增新文章 2022-03-26-blog.17lai.site</span>hexo new post <span class="token number">2022</span>-03-26-blog.17lai.site<span class="token comment"># 清理上次生成的静态网页，可以不运行，但你修改了一些源码后，很可能有各种不生效或错误</span>hexo clean<span class="token comment"># 生成静态网页</span>hexo g<span class="token comment"># gulp调用gulpfile.js压缩静态网页相关代码，减小网页体积</span>gulp <span class="token comment"># 调用根目录中 _config.yml 文件的deploy配置的参数来部署你的静态网页</span>hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hexo-目录结构说明"><a href="#hexo-目录结构说明" class="headerlink" title="hexo 目录结构说明"></a>hexo 目录结构说明</h3><p>在执行过<code>Hexo deploy</code>命令之后，目录结构新增了<code>.deploy_git</code>，<code>public</code>，<code>.gitignore</code>，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> $ tree -L <span class="token number">2</span><span class="token builtin class-name">.</span>├── .deploy_git├── node_modules├── public├── scaffolds│   ├── draft.md│   ├── page.md│   └── post.md├── <span class="token builtin class-name">source</span>│   ├── _posts│   ├── _drafts├── themes├── _config.yml├── db.json├── package.json└── package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h5><p>用来配置博客相关的参数，初始化时自动创建。具体参数设置，可参照&nbsp;<a href="https://hexo.io/zh-cn/docs/configuration">Hexo 配置</a>&nbsp;文档。</p><h5 id="node-modules-和-package-json"><a href="#node-modules-和-package-json" class="headerlink" title="node_modules 和 package.json"></a>node_modules 和 package.json</h5><p>都是在初始化时自动创建。</p><ul><li><code>node_modules</code>用来存储已安装的各类依赖包。</li><li><code>package.json</code>用来查看 Hexo 的版本以及相关依赖包的版本。</li></ul><p>Hexo 会默认安装：</p><ul><li>hexo：主程序</li><li>hexo-deployer-git：实现 git 部署方式</li><li>hexo-generator-archive：存档页面生成器</li><li>hexo-generator-category：分类页面生成器</li><li>hexo-generator-index：index 生成器</li><li>hexo-generator-tag：标签页面生成器</li><li>hexo-renderer-ejs：支持 EJS 渲染</li><li>hexo-renderer-marked：Markdown 引擎</li><li>hexo-renderer-stylus：支持 stylus 渲染</li><li>hexo-server：支持本地预览，默认地址 localhost:4000</li></ul><p>新安装的依赖包，也会保存在<code>node_module</code>文件夹下。</p><h5 id="scaffold"><a href="#scaffold" class="headerlink" title="scaffold"></a>scaffold</h5><p>模板文件夹，初始化时自动创建。包含<code>page</code>，<code>post</code>，<code>draft</code>三种模板，分别对应 页面、要发布的文章、草稿。</p><h5 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h5><p>主题文件夹，初始化时自动创建。每一个主题，都有一个单独的文件夹。默认主题为&nbsp;<a href="https://github.com/hexojs/hexo-theme-landscape">landscape</a>。</p><h5 id="source-，-public-和-deploy-git"><a href="#source-，-public-和-deploy-git" class="headerlink" title="source ， public 和 .deploy_git"></a>source ， public 和 .deploy_git</h5><ul><li>source：资源文件夹。用来存放图片、Markdown 文档（文章、草稿）、各种页面（分类、关于页面等）。</li><li>public：将 source 文件夹里的 Markdown 文档，转换成 index.html。再结合主题进行渲染，就是我们最终看到的博客。</li><li>.deploy_git：将 public 文件夹的内容提交到 Github 后生成，内容与 public 文件夹基本一致。</li></ul><p>这三者的关系大致是：source -&gt; public -&gt; .deploy_git</p><ul><li>执行<code>hexo generate</code>，根据 source，更新 public。</li><li>执行<code>hexo deploy</code>，根据 public，更新 .deploy_git。</li></ul><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h4><ul><li><code>hexo server</code>&nbsp;#启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</li><li><code>hexo server -s</code>&nbsp;#以静态模式启动</li><li><code>hexo server -p 5000</code>&nbsp;#更改访问端口 (默认端口为 4000，’ctrl + c’关闭 server)</li><li><code>hexo server -i IP地址</code>&nbsp;#自定义 IP</li><li><code>hexo clean</code>&nbsp;#清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的 public 文件夹</li><li><code>hexo g</code>&nbsp;#生成静态网页 (执行 $&nbsp;<code>hexo g</code>后会在站点根目录下生成 public 文件夹, hexo 会将”/blog/source/“ 下面的.md 后缀的文件编译为.html 后缀的文件,存放在”/blog/public/ “ 路径下)</li><li><code>hexo d</code>&nbsp;#自动生成网站静态文件，并将本地数据部署到设定的仓库(如 github)</li><li><code>hexo init</code>&nbsp;文件夹名称 #初始化 XX 文件夹名称</li><li><code>npm update hexo -g</code>#升级</li><li><code>npm install hexo -g</code>&nbsp;#安装</li><li><code>node -v</code>&nbsp;#查看 node.js 版本号</li><li><code>npm -v</code>&nbsp;#查看 npm 版本号</li><li><code>git --version</code>&nbsp;#查看 git 版本号</li><li><code>hexo -v</code>&nbsp;#查看 hexo 版本号</li><li>hexo new page “music” #新增页面music</li><li>hexo new post “文章名称” #新增文章</li></ul><h4 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h4><ul><li><p><code>hexo n "我的第一篇文章"</code>&nbsp;等价于&nbsp;<code>hexo new "我的第一篇文章"</code>&nbsp;还等价于&nbsp;<code>hexo new post "我的第一篇文章"</code></p></li><li><p><code>hexo p</code>&nbsp;等价于&nbsp;<code>hexo publish</code></p></li><li><p><code>hexo g</code>&nbsp;等价于&nbsp;<code>hexo generate</code></p></li><li><p><code>hexo s</code>等价于&nbsp;<code>hexo server</code></p></li><li><p><code>hexo d</code>&nbsp;等价于&nbsp;<code>hexo deploy</code></p></li><li><p><code>hexo g -d</code>等价于<code>hexo generate --deploy</code></p></li></ul><p>注:&nbsp;<code>hexo clean</code>&nbsp;没有 简写,&nbsp;<code>git --version</code>&nbsp;没有简写</p><h2 id="Hexo基础配置篇"><a href="#Hexo基础配置篇" class="headerlink" title="Hexo基础配置篇"></a>Hexo基础配置篇</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a>&nbsp;是一个采用&nbsp;<code>Material Design</code>&nbsp;和响应式设计的 Hexo 博客主题，点击&nbsp;<a href="https://www.lixl.cn/">这里</a>&nbsp;可以查看示例效果。点击&nbsp;<a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a>&nbsp;下载&nbsp;<code>master</code>&nbsp;分支的最新稳定版的代码，解压缩后，将&nbsp;<code>hexo-theme-matery</code>&nbsp;的文件夹复制到 Hexo 的&nbsp;<code>themes</code>&nbsp;文件夹中即可。</p><p>Docker环境命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git /app/themes/matery<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的&nbsp;<code>_config.yml</code>&nbsp;的&nbsp;<code>theme</code>&nbsp;的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml&nbsp;文件的其它修改建议"></a><code>_config.yml</code>&nbsp;文件的其它修改建议</h4><ul><li>请修改&nbsp;<code>_config.yml</code>&nbsp;的&nbsp;<code>url</code>&nbsp;的值为你的网站主&nbsp;<code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个&nbsp;<code>per_page</code>&nbsp;的分页条数值为&nbsp;<code>6</code>&nbsp;的倍数，如：<code>12</code>、<code>18</code>&nbsp;等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果是中文用户，则建议修改&nbsp;<code>language</code>&nbsp;的值为&nbsp;<code>zh-CN</code>。</li></ul><p>在本主题的&nbsp;<code>_config.yml</code>&nbsp;中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code>&nbsp;和&nbsp;<code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code>&nbsp;和&nbsp;<code>disqus</code>&nbsp;评论配置</li><li><a href="https://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的&nbsp;<code>hashcode</code>&nbsp;值取余，来选择展示对应的特色图</li></ul><h3 id="新建主题必备about、tags、404等页面"><a href="#新建主题必备about、tags、404等页面" class="headerlink" title="新建主题必备about、tags、404等页面"></a>新建主题必备about、tags、404等页面</h3><h4 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h4><p><code>categories</code>&nbsp;页是用来展示所有分类的页面，如果&nbsp;<code>source</code>&nbsp;目录下还没有&nbsp;<code>categories/index.md</code>&nbsp;文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件&nbsp;<code>/source/categories/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> categories<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"categories"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><p><code>tags</code>&nbsp;页是用来展示所有标签的页面，如果&nbsp;<code>source</code>&nbsp;目录下还没有&nbsp;<code>tags/index.md</code>&nbsp;文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件&nbsp;<code>/source/tags/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> tags<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 18:23:38</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"tags"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建留言板-contact-页"><a href="#新建留言板-contact-页" class="headerlink" title="新建留言板 contact 页"></a>新建留言板 contact 页</h4><p><code>contact</code>&nbsp;页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客&nbsp;<code>source</code>&nbsp;目录下还没有&nbsp;<code>contact/index.md</code>&nbsp;文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件&nbsp;<code>/source/contact/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> contact<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"contact"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的&nbsp;<code>_config.yml</code>&nbsp;文件中，第&nbsp;<code>19</code>&nbsp;至&nbsp;<code>21</code>&nbsp;行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h4 id="新建友情链接-friends-页"><a href="#新建友情链接-friends-页" class="headerlink" title="新建友情链接 friends 页"></a>新建友情链接 friends 页</h4><p><code>friends</code>&nbsp;页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客&nbsp;<code>source</code>&nbsp;目录下还没有&nbsp;<code>friends/index.md</code>&nbsp;文件，那么你就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑你刚刚新建的页面文件&nbsp;<code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在你的博客&nbsp;<code>source</code>&nbsp;目录下新建&nbsp;<code>_data</code>&nbsp;目录，在&nbsp;<code>_data</code>&nbsp;目录中新建&nbsp;<code>friends.json</code>&nbsp;文件，文件内容如下所示：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"https://blog.17lai.site/favicon.png"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"夜法之书的Blog"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"嵌入式，Linux Kernel&amp;Driver, PT, Docker, Nas等等"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blog.17lai.site"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/1_qq_27922023.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"码酱"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"我不是大佬，只是在追寻大佬的脚步"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://luokangyuan.com/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/4027734.jpeg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"闪烁之狐"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://blinkfox.github.io/"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token property">"avatar"</span><span class="token operator">:</span> <span class="token string">"http://image.luokangyuan.com/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"ja_rome"</span><span class="token punctuation">,</span>    <span class="token property">"introduction"</span><span class="token operator">:</span> <span class="token string">"平凡的脚步也可以走出伟大的行程"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://me.csdn.net/jlh912008548"</span><span class="token punctuation">,</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"前去学习"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><p><code>about</code>&nbsp;页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果&nbsp;<code>source</code>&nbsp;目录下还没有&nbsp;<code>about/index.md</code>&nbsp;文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"about"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件&nbsp;<code>/source/about/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> about<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-09-30 17:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="新建404页"><a href="#新建404页" class="headerlink" title="新建404页"></a>新建404页</h4><p>新建一个404.md文件</p><p>在hexo的souce文件夹下创建一个404.md，之后输入如下内容：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token front-matter-block"><span class="token punctuation">---</span><span class="token front-matter yaml language-yaml"><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token key atrule">404date</span><span class="token punctuation">:</span> <span class="token key atrule">2019-11-23 21:10:10type</span><span class="token punctuation">:</span> "404"layout<span class="token punctuation">:</span> <span class="token string">"404"</span></span><span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913191101.png" alt="新建404.md"></p><p><strong>新建404.md</strong></p><p>然后<code>hexo g</code>生成页面中就有404。只是页面较丑。</p><h4 id="404页面美化"><a href="#404页面美化" class="headerlink" title="404页面美化"></a>404页面美化</h4><blockquote><p>下载404特效</p><p>点击下载代码:<a href="https://www.lanrenzhijia.com/js/4285.html">点我去代码出处</a></p></blockquote><h5 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h5><h5 id="放入js文件到主题中"><a href="#放入js文件到主题中" class="headerlink" title="放入js文件到主题中"></a>放入js文件到主题中</h5><p>将下载的压缩包解压，会发现里面有两个js文件和一个html页面，重要的就是js文件，将文件移植到主题的source文件的libs文件夹下，需要自己创建一个文件夹，我给文件夹取的名字叫做404。</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913191716.png"></p><h5 id="导入404-js"><a href="#导入404-js" class="headerlink" title="导入404 js"></a>导入404 js</h5><p>因为该主题的js文件都是写_config.yml文件里面的，为了规范，也需要将文件的路径写到该文件夹下</p><p>如下，之后导入js文件的时候就可以使用404bodymovin和404data来代替了</p><p><img src="https://cimg1.17lai.site/data/2021/09/1320210913192151.png" alt="修改主题_config.yml文件"></p><p><strong>修改主题_config.yml文件</strong></p><h5 id="编辑404-esj"><a href="#编辑404-esj" class="headerlink" title="编辑404.esj"></a>编辑404.esj</h5><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">    <span class="token comment">/* don't remove. */</span>    <span class="token selector">.page404-cover</span> <span class="token punctuation">{</span>        <span class="token comment">/* height: 75vh; */</span>        <span class="token property">height</span><span class="token punctuation">:</span> 88vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token selector">#svgContainer</span> <span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>      <span class="token property">background-color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>      <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.404bodymovin) %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for(theme.libs.js.404data) %&gt;<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bg-cover pd-header page404-cover<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>svgContainer<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">        <span class="token keyword">var</span> svgContainer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'svgContainer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> animItem <span class="token operator">=</span> bodymovin<span class="token punctuation">.</span><span class="token function">loadAnimation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          <span class="token literal-property property">wrapper</span><span class="token operator">:</span> svgContainer<span class="token punctuation">,</span>          <span class="token literal-property property">animType</span><span class="token operator">:</span> <span class="token string">'svg'</span><span class="token punctuation">,</span>          <span class="token literal-property property">loop</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token literal-property property">animationData</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>animationData<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在就移植成功了，使用下面命令上传，之后输入一个错误的页面就可以查看到了</p><pre class="line-numbers language-none"><code class="language-none">hexo cl &amp;&amp; hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Tips: 不要再本地试验，本地的时候输入错误的页面不会显示404页面的。</p></blockquote><h4 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h4><p><code>friends</code>&nbsp;页是用来展示<strong>友情连接</strong>信息的页面，如果&nbsp;<code>source</code>&nbsp;目录下还没有&nbsp;<code>friends/index.md</code>&nbsp;文件，那么就需要新建一个，命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑刚刚新建的页面文件&nbsp;<code>/source/friends/index.md</code>，至少需要以下内容：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> friends<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2018-12-12 21:25:30</span><span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token key atrule">layout</span><span class="token punctuation">:</span> <span class="token string">"friends"</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，在&nbsp;<code>source</code>&nbsp;目录下新建&nbsp;<code>_data</code>&nbsp;目录，在&nbsp;<code>_data</code>&nbsp;目录中新建&nbsp;<code>friends.json</code>&nbsp;文件，文件内容如下所示：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token key atrule">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"https://www.lixl.cn/medias/avatar.jpg"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"悟尘记"</span><span class="token punctuation">,</span>    <span class="token key atrule">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"人生就是一场修行，上善若水，厚德载物。"</span><span class="token punctuation">,</span>    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.lixl.cn/"</span><span class="token punctuation">,</span>    <span class="token key atrule">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去参观"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token key atrule">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"https://wiki.hyperledger.org/download/attachments/2392069/fabric?version=1&amp;modificationDate=1540928132000&amp;api=v2"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"Fabric"</span><span class="token punctuation">,</span>    <span class="token key atrule">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"A Blockchain Platform for the Enterprise"</span><span class="token punctuation">,</span>    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://hyperledger-fabric.readthedocs.io/en/master/"</span><span class="token punctuation">,</span>    <span class="token key atrule">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去学习"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token key atrule">"avatar"</span><span class="token punctuation">:</span> <span class="token string">"https://www.bootcdn.cn/assets/img/maoyun.svg"</span><span class="token punctuation">,</span>    <span class="token key atrule">"name"</span><span class="token punctuation">:</span> <span class="token string">"BootCDN"</span><span class="token punctuation">,</span>    <span class="token key atrule">"introduction"</span><span class="token punctuation">:</span> <span class="token string">"稳定、快速、免费的前端开源项目 CDN 加速服务。"</span><span class="token punctuation">,</span>    <span class="token key atrule">"url"</span><span class="token punctuation">:</span> <span class="token string">"https://www.bootcdn.cn/"</span><span class="token punctuation">,</span>    <span class="token key atrule">"title"</span><span class="token punctuation">:</span> <span class="token string">"前去加速"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><ul><li>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)</li><li>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a>&nbsp;中查找</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)</li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.</li><li>注意每个二级菜单模块前要加&nbsp;<code>-</code>.</li><li>注意缩进格式</li></ol><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">menu</span><span class="token punctuation">:</span>  <span class="token key atrule">Index</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>home  <span class="token key atrule">Tags</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /tags    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>tags  <span class="token key atrule">Categories</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /categories    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>bookmark  <span class="token key atrule">Archives</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /archives    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>archive  <span class="token key atrule">About</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /about    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>user<span class="token punctuation">-</span>circle<span class="token punctuation">-</span>o  <span class="token key atrule">Friends</span><span class="token punctuation">:</span>    <span class="token key atrule">url</span><span class="token punctuation">:</span> /friends    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>address<span class="token punctuation">-</span>book  <span class="token key atrule">Medias</span><span class="token punctuation">:</span>    <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>list    <span class="token key atrule">children</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Music        <span class="token key atrule">url</span><span class="token punctuation">:</span> /music        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>music      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Movies        <span class="token key atrule">url</span><span class="token punctuation">:</span> /movies        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>film      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Books        <span class="token key atrule">url</span><span class="token punctuation">:</span> /books        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>book      <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Galleries        <span class="token key atrule">url</span><span class="token punctuation">:</span> /galleries        <span class="token key atrule">icon</span><span class="token punctuation">:</span> fas fa<span class="token punctuation">-</span>image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h3><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code>&nbsp;选项中的所有内容均为<strong>非必填</strong>的。但仍然建议至少填写&nbsp;<code>title</code>&nbsp;和&nbsp;<code>date</code>&nbsp;的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code>&nbsp;的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根&nbsp;<code>_config.yml</code>&nbsp;中的&nbsp;<code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code>&nbsp;中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如:&nbsp;<code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果&nbsp;<code>top</code>&nbsp;值为&nbsp;<code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置&nbsp;<code>password</code>&nbsp;的值，该值必须是用&nbsp;<code>SHA256</code>&nbsp;加密后的密码，防止被他人识破。前提是在主题的&nbsp;<code>config.yml</code>&nbsp;中激活了&nbsp;<code>verifyPassword</code>&nbsp;选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的&nbsp;<code>config.yml</code>&nbsp;中激活了&nbsp;<code>toc</code>&nbsp;选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启&nbsp;<code>mathjax</code>，且需要在主题的&nbsp;<code>_config.yml</code>&nbsp;文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果&nbsp;<code>img</code>&nbsp;属性不填写的话，文章特色图会根据文章标题的&nbsp;<code>hashcode</code>&nbsp;的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code>&nbsp;的值尽量保证每篇文章是唯一的，因为本主题中&nbsp;<code>Gitalk</code>&nbsp;和&nbsp;<code>Gitment</code>&nbsp;识别&nbsp;<code>id</code>&nbsp;是通过&nbsp;<code>date</code>&nbsp;的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的&nbsp;<code>_config.yml</code>&nbsp;中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="https://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的&nbsp;<code>Front-matter</code>&nbsp;示例。</p><h4 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-10-03 14:25:00</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> 基于Hexo的hexo<span class="token punctuation">-</span>theme<span class="token punctuation">-</span>matery主题搭建博客并优化<span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token datetime number">2019-12-30 09:25:00</span><span class="token key atrule">author</span><span class="token punctuation">:</span> 17lai.site<span class="token key atrule">img</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg<span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">coverImg</span><span class="token punctuation">:</span> /medias/cover/hexo.jpg<span class="token key atrule">password</span><span class="token punctuation">:</span> 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92<span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">summary</span><span class="token punctuation">:</span> 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要<span class="token key atrule">categories</span><span class="token punctuation">:</span> Hexo<span class="token key atrule">keywords</span><span class="token punctuation">:</span> Hexo GitHub blog<span class="token key atrule">tags</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> Hexo  <span class="token punctuation">-</span> Blog  <span class="token punctuation">-</span> GitHub<span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="新建文章模板修改"><a href="#新建文章模板修改" class="headerlink" title="新建文章模板修改"></a>新建文章模板修改</h3><p>首先为了新建文章方便，我们可以修改一下文章模板，建议将<code>/scaffolds/post.md</code>修改为如下代码：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">---</span><span class="token key atrule">title</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> title <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">date</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> date <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token key atrule">author</span><span class="token punctuation">:</span> <span class="token key atrule">img</span><span class="token punctuation">:</span> <span class="token key atrule">coverImg</span><span class="token punctuation">:</span> <span class="token key atrule">top</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cover</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">toc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">mathjax</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">password</span><span class="token punctuation">:</span><span class="token key atrule">summary</span><span class="token punctuation">:</span><span class="token key atrule">tags</span><span class="token punctuation">:</span><span class="token key atrule">categories</span><span class="token punctuation">:</span><span class="token punctuation">---</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样新建文章后 一些<code>Front-matter</code>参数不用你自己补充了，修改对应信息就可以了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了&nbsp;<code>prismjs</code>&nbsp;代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过&nbsp;<code>hexo-prism-plugin</code>&nbsp;的插件，那么你须要执行&nbsp;<code>npm uninstall hexo-prism-plugin</code>&nbsp;来卸载掉它，否则生成的代码中会有&nbsp;<code>{</code>&nbsp;和&nbsp;<code>}</code>&nbsp;的转义字符。</p><p>然后，修改 Hexo 根目录下&nbsp;<code>_config.yml</code>&nbsp;文件中&nbsp;<code>highlight.enable</code>&nbsp;的值为&nbsp;<code>false</code>，并将&nbsp;<code>prismjs.enable</code>&nbsp;的值设置为&nbsp;<code>true</code>，主要配置如下：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主题中默认的&nbsp;<code>prismjs</code>&nbsp;主题是&nbsp;<code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往&nbsp;<a href="https://prismjs.com/download.html">prismjs 下载页面</a>&nbsp;定制下载自己喜欢的主题&nbsp;<code>css</code>&nbsp;文件，然后将此 css 主题文件取名为&nbsp;<code>prism.css</code>，替换掉&nbsp;<code>hexo-theme-matery</code>&nbsp;主题文件夹中的&nbsp;<code>source/libs/prism/prism.css</code>&nbsp;文件即可。</p><h3 id="添加文章搜索功能"><a href="#添加文章搜索功能" class="headerlink" title="添加文章搜索功能"></a>添加文章搜索功能</h3><blockquote><ul><li><p>这个插件比广大教程提到的<code>hexo-generator-search</code>插件更加强大和好用！</p></li><li><p>matery目前只支持<code>search.xml</code>&nbsp;xml格式的搜索文件！</p></li></ul></blockquote><p>本主题中还使用到了&nbsp;<a href="https://github.com/next-theme/hexo-generator-searchdb">hexo-generator-searchdb</a>&nbsp;的 Hexo 插件来做内容搜索，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-searchdb --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的&nbsp;<code>_config.yml</code>&nbsp;文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">search</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> search.xml  <span class="token key atrule">field</span><span class="token punctuation">:</span> post  <span class="token key atrule">content</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">format</span><span class="token punctuation">:</span> html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数含义</strong></p><ul><li><p><strong>path</strong>&nbsp;- file path. By default is&nbsp;<code>search.xml</code>. If the file extension is&nbsp;<code>.json</code>, the output format will be JSON. Otherwise XML format file will be exported.</p></li><li><p>field</p><ul><li><p>the search scope you want to search, you can chose:</p></li><li><p><strong>post</strong>&nbsp;(Default) - will only cover all the posts of your blog.</p></li><li><p><strong>page</strong>&nbsp;- will only cover all the pages of your blog.</p></li><li><p><strong>all</strong>&nbsp;- will cover all the posts and pages of your blog.</p></li></ul></li><li><p><strong>content</strong>&nbsp;- whether contains the whole content of each article. If&nbsp;<code>false</code>, the generated results only cover title and other meta info without mainbody. By default is&nbsp;<code>true</code>.</p></li><li><p>format</p><ul><li><p>the form of the page contents, options are:</p></li><li><p><strong>html</strong>&nbsp;(Default) - original html string being minified.</p></li><li><p><strong>striptags</strong>&nbsp;- original html string being minified, and remove all the tags.</p></li><li><p><strong>raw</strong>&nbsp;- markdown text of each posts or pages.</p></li></ul></li></ul><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的&nbsp;<code>/layout/_partial/footer.ejs</code>&nbsp;文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的&nbsp;<code>_config.yml</code>&nbsp;文件中，默认支持&nbsp;<code>QQ</code>、<code>GitHub</code>&nbsp;和邮箱的配置，可以在主题文件的&nbsp;<code>/layout/_partial/social-link.ejs</code>&nbsp;文件中，新增、修改需要的社交链接地址，增加链接可参考如下代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://github.com/blinkfox<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>tooltipped<span class="token punctuation">"</span></span>  <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span>  <span class="token attr-name">data-tooltip</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>访问我的GitHub<span class="token punctuation">"</span></span>  <span class="token attr-name">data-position</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>top<span class="token punctuation">"</span></span>  <span class="token attr-name">data-delay</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-github<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，社交图标（如：<code>fa-github</code>）可以在&nbsp;<a href="https://fontawesome.com/icons">Font Awesome</a>&nbsp;中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook:&nbsp;<code>fa-facebook</code></li><li>Twitter:&nbsp;<code>fa-twitter</code></li><li>Google-plus:&nbsp;<code>fa-google-plus</code></li><li>Linkedin:&nbsp;<code>fa-linkedin</code></li><li>Tumblr:&nbsp;<code>fa-tumblr</code></li><li>Medium:&nbsp;<code>fa-medium</code></li><li>Slack:&nbsp;<code>fa-slack</code></li><li>新浪微博:&nbsp;<code>fa-weibo</code></li><li>微信:&nbsp;<code>fa-wechat</code></li><li>QQ:&nbsp;<code>fa-qq</code></li></ul><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的&nbsp;<code>source/medias/reward</code>&nbsp;文件中，可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置文章基本信息"><a href="#配置文章基本信息" class="headerlink" title="配置文章基本信息"></a>配置文章基本信息</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">new_post_name</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.md   <span class="token comment"># 新文章的文件名称</span><span class="token key atrule">default_layout</span><span class="token punctuation">:</span> post       <span class="token comment"># 预设布局</span><span class="token key atrule">auto_spacing</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token comment"># 在中文和英文之间加入空格</span><span class="token key atrule">titlecase</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>           <span class="token comment"># 把标题转换为 title case</span><span class="token key atrule">external_link</span><span class="token punctuation">:</span>             <span class="token comment"># 在新标签中打开链接</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># 在新标签中打开链接</span>  <span class="token key atrule">field</span><span class="token punctuation">:</span>                   <span class="token comment"># 对整个网站（site）生效或仅对文章（post）生效</span>  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>                 <span class="token comment"># 需要排除的域名。主域名和子域名如 www 需分别配置    []</span><span class="token key atrule">filename_case</span><span class="token punctuation">:</span> <span class="token number">0</span>           <span class="token comment"># 把文件名称转换为 (1) 小写或 (2) 大写</span><span class="token key atrule">render_drafts</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 显示草稿，默认为：false</span><span class="token key atrule">post_asset_folder</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 启动 Asset 文件夹</span><span class="token key atrule">relative_link</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 把链接改为与根目录的相对位址</span><span class="token key atrule">future</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>               <span class="token comment"># 显示未来的文章</span><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                 <span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>       <span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span>             <span class="token comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置代码高亮及样式"><a href="#配置代码高亮及样式" class="headerlink" title="配置代码高亮及样式"></a>配置代码高亮及样式</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">highlight</span><span class="token punctuation">:</span>                      <span class="token comment"># 代码块的设置</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>                 <span class="token comment"># 开启代码块高亮</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>             <span class="token comment"># 显示行数</span>  <span class="token key atrule">auto_detect</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>            <span class="token comment"># 如果未指定语言，则启用自动检测</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span>               <span class="token comment"># 用 n 个空格替换 tabs；如果值为空，则不会替换 tabs</span>  <span class="token key atrule">wrap</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hljs</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">prismjs</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">preprocess</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">line_number</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">tab_replace</span><span class="token punctuation">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置代码的样式</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">code</span><span class="token punctuation">:</span>  <span class="token key atrule">lang</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 代码块是否显示名称</span>  <span class="token key atrule">copy</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>     <span class="token comment"># 代码块是否可复制</span>  <span class="token key atrule">shrink</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 代码块是否可以收缩</span>  <span class="token key atrule">break</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment"># 代码是否折行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置是否启用转载限制模块"><a href="#配置是否启用转载限制模块" class="headerlink" title="配置是否启用转载限制模块"></a>配置是否启用转载限制模块</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">reprint</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>   <span class="token comment">#是否启用“转载规则限定模块”</span>  <span class="token key atrule">default</span><span class="token punctuation">:</span> cc_by<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文章转载规则，可以是&nbsp;<code>cc_by</code>,&nbsp;<code>cc_by_nd</code>,&nbsp;<code>cc_by_sa</code>,&nbsp;<code>cc_by_nc</code>,&nbsp;<code>cc_by_nc_nd</code>,&nbsp;<code>cc_by_nc_sa</code>,&nbsp;<code>cc0</code>,&nbsp;<code>noreprint</code>&nbsp;或&nbsp;<code>pay</code>&nbsp;中的一个</p><h3 id="配置文章阅读密码功能"><a href="#配置文章阅读密码功能" class="headerlink" title="配置文章阅读密码功能"></a>配置文章阅读密码功能</h3><p>阅读文章的密码验证功能，如要使用此功能请激活该配置项，并在对应文章的&nbsp;<code>Front-matter</code>&nbsp;中写上&nbsp;<code>password</code>&nbsp;的键和加密后的密文即可。</p><blockquote><p>请注意：为了保证密码原文不会被泄露到网页中，文章的密码必须是通过&nbsp;<code>SHA256</code>&nbsp;加密的，这样就不会被破解。</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">verifyPassword</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">promptMessage</span><span class="token punctuation">:</span> 请输入访问本文章的密码  <span class="token key atrule">errorMessage</span><span class="token punctuation">:</span>  密码错误，将返回主页！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何一键部署hexo"><a href="#如何一键部署hexo" class="headerlink" title="如何一键部署hexo"></a>如何一键部署hexo</h3><p>通过&nbsp;<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>&nbsp;插件可以实现一键将博客同时部署到多个 git 仓库中。如同时发布到 github 及 gitee 提供的 pages 服务。安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 Hexo 根目录下的&nbsp;<code>_config.yml</code>&nbsp;文件中的如下内容:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">## Docs: https://hexo.io/docs/deployment.html</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/lxl80/lxl80.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>也可以如本站一样，采用&nbsp;<a href="https://github.com/75k/hexo-deployer-cos-enhanced">hexo-deployer-cos-enhanced</a>&nbsp;插件将静态内容部署到腾讯云对象存储服务中，在 DNS 配置中将境内线路解析到腾讯云 CDN 地址，实现加速。部署完成后会自动刷新被更新文件的 CDN 缓存。</p></blockquote><p>安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-cos-enhanced --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>_config.yml</code>&nbsp;配置如下:</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/lxl80/blog.git    <span class="token key atrule">branch</span><span class="token punctuation">:</span> gh<span class="token punctuation">-</span>pages    <span class="token key atrule">ignore_hidden</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> cos    <span class="token key atrule">bucket</span><span class="token punctuation">:</span> lxl80<span class="token punctuation">-</span>130<span class="token important">****</span>    <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing    <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9<span class="token important">****F8FvL</span>    <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur<span class="token important">****QZR3PgjXmlVg</span>    <span class="token key atrule">cdnConfig</span><span class="token punctuation">:</span>      <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token key atrule">cdnUrl</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//static.lixl.cn      <span class="token key atrule">bucket</span><span class="token punctuation">:</span> static<span class="token punctuation">-</span>130<span class="token important">****</span>      <span class="token key atrule">region</span><span class="token punctuation">:</span> ap<span class="token punctuation">-</span>beijing      <span class="token key atrule">folder</span><span class="token punctuation">:</span> static      <span class="token key atrule">secretId</span><span class="token punctuation">:</span> AKIDh9<span class="token important">****F8FvL</span>      <span class="token key atrule">secretKey</span><span class="token punctuation">:</span> Z3IGiur<span class="token important">****QZR3PgjXmlVg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后通过&nbsp;<code>hexo g -d</code>&nbsp;即可实现一键发布，并更新 CDN 缓存。</p><h3 id="文章链接转静态短地址（可选的）"><a href="#文章链接转静态短地址（可选的）" class="headerlink" title="文章链接转静态短地址（可选的）"></a>文章链接转静态短地址（可选的）</h3><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于&nbsp;<code>SEO</code>，且&nbsp;<code>gitment</code>&nbsp;评论对中文链接也不支持。我们可以用&nbsp;<a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a>&nbsp;Hexo 插件生成文章时生成中文拼音的永久链接，或者用<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a>&nbsp;生成静态文章链接。以下结合 hexo-abbrlink 生成类似&nbsp;<code>/yyyy/mmdd+随机数.html</code>&nbsp;的文章链接地址。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><blockquote><p>npm下载太慢怎么办？ 修改国内淘宝源加速，<a href="https://blog.17lai.site/posts/40300608/#npm%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F">戳</a></p></blockquote></li></ul><p>在 Hexo 根目录下的&nbsp;<code>_config.yml</code>&nbsp;文件中，修改&nbsp;<code>permalink:</code>&nbsp;，并在文件末尾新增&nbsp;<code>abbrlink:</code>配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>year/<span class="token punctuation">:</span>month<span class="token punctuation">:</span>day<span class="token punctuation">:</span>abbrlink.html<span class="token key atrule">abbrlink</span><span class="token punctuation">:</span>  <span class="token key atrule">alg</span><span class="token punctuation">:</span> crc16 <span class="token comment">#算法选项：crc16丨crc32</span>  <span class="token key atrule">rep</span><span class="token punctuation">:</span> dec <span class="token comment">#输出进制：dec为十进制，hex为十六进制</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-emoji-表情支持（可选的）"><a href="#添加-emoji-表情支持（可选的）" class="headerlink" title="添加 emoji 表情支持（可选的）"></a>添加 emoji 表情支持（可选的）</h3><p>Matery主题新增了对&nbsp;<code>emoji</code>&nbsp;表情的支持，使用到了&nbsp;<a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a>&nbsp;的 Hexo 插件来支持&nbsp;<code>emoji</code>&nbsp;表情的生成，把对应的&nbsp;<code>markdown emoji</code>&nbsp;语法（<code>::</code>, 例如：<code>:smile:</code>）转变成会跳跃的&nbsp;<code>emoji</code>&nbsp;表情，安装命令如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><ul><li>npm下载太慢怎么办？ 修改国内淘宝源加速，<a href="https://blog.17lai.site/posts/40300608/#npm%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F">戳</a></li></ul></blockquote><p>在 博客根目录下的&nbsp;<code>_config.yml</code>&nbsp;文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行&nbsp;<code>hexo clean &amp;&amp; hexo g</code>&nbsp;重新生成博客文件，然后就可以在文章中对应位置看到你用&nbsp;<code>emoji</code>&nbsp;语法写的表情了。</p><h3 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装&nbsp;<a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i --save hexo-wordcount<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后只需在本主题下的&nbsp;<code>_config.yml</code>&nbsp;文件中，激活以下配置项即可：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">wordCount</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 将这个值设置为 true 即可.</span>  <span class="token key atrule">postWordCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">min2read</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">totalCount</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h3><p>本主题中还使用到了&nbsp;<a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a>&nbsp;的 Hexo 插件来做&nbsp;<code>RSS</code>，安装命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Hexo 根目录下的&nbsp;<code>_config.yml</code>&nbsp;文件中，新增以下的配置项：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">feed</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> atom  <span class="token key atrule">path</span><span class="token punctuation">:</span> atom.xml  <span class="token key atrule">limit</span><span class="token punctuation">:</span> <span class="token number">20</span>  <span class="token key atrule">hub</span><span class="token punctuation">:</span>  <span class="token key atrule">content</span><span class="token punctuation">:</span>  <span class="token key atrule">content_limit</span><span class="token punctuation">:</span> <span class="token number">140</span>  <span class="token key atrule">content_limit_delim</span><span class="token punctuation">:</span> <span class="token string">" "</span>  <span class="token key atrule">order_by</span><span class="token punctuation">:</span> <span class="token punctuation">-</span>date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行&nbsp;<code>hexo clean &amp;&amp; hexo g</code>&nbsp;重新生成博客文件，然后在&nbsp;<code>public</code>&nbsp;文件夹中即可看到&nbsp;<code>atom.xml</code>&nbsp;文件，说明已经安装成功了。</p><blockquote><p><a href="https://github.com/sergeyzwezdin/hexo-feed">hexo-feed</a>&nbsp;这个RSS插件更加强大，支持分类订阅，标签订阅。但对hexo 6.x没有做支持，虽然在hexo6.x上面工作正常。</p></blockquote><h3 id="增加百度统计功能"><a href="#增加百度统计功能" class="headerlink" title="增加百度统计功能"></a>增加百度统计功能</h3><p>首先注册<a href="https://tongji.baidu.com/"><strong>百度统计站长版</strong></a>，登陆后点击 新增网站，然后直接输入你的博客地址例如： <a href="https://blog.17lai.site,网站域名/">https://blog.17lai.site，网站域名</a> 和 网站首页 都写这个，网站名称 可以填 我的博客，<br>行业类别： 博客—空间周边。</p><p>然后点击左侧菜单的 代码获取，找到</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">hm<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"https://hm.baidu.com/hm.js?……"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>问号后的这一段十六进制代码<br>复制下来，粘贴到 主题配置文件 中的baidu_analytics:后面，注意冒号和值之间要有一个空格，然后将该字段前面的#号删除代表启用此功能。保存后即可</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Add baidu analytics configuration</span><span class="token comment"># 添加 baidu Analytics 配置</span><span class="token key atrule">baiduAnalytics</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 开启时设置为true 并填写正确的id</span>  <span class="token key atrule">id</span><span class="token punctuation">:</span> f614xxxxxxxxxxxxxxxx05d25e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Leancloud-Valine打造Hexo个人博客极简评论系统"><a href="#Leancloud-Valine打造Hexo个人博客极简评论系统" class="headerlink" title="Leancloud+Valine打造Hexo个人博客极简评论系统"></a><a href="https://www.cnblogs.com/Timesi/p/9556236.html">Leancloud+Valine打造Hexo个人博客极简评论系统</a></h3><h4 id="Leancloud配置"><a href="#Leancloud配置" class="headerlink" title="Leancloud配置"></a>Leancloud配置</h4><p>首先访问Leancloud官网<code>https://leancloud.cn/</code><br>有Github账号的小伙伴可以用Github账号进行登陆然后绑定邮箱就可以啦！<br>进入之后点击创建应用  </p><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911134958.png"></p><p>这样我们就创建好啦！  </p><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911135007.png"></p><p>接着点击应用右上角的设置进入设置界面  </p><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911135013.png"></p><p>选择应用key，这样就可以看到我们接下来需要使用到的key  </p><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911135020.png"></p><p>接着进入应用中心绑定你的个人博客域名  </p><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911135027.png"></p><h4 id="Valine配置"><a href="#Valine配置" class="headerlink" title="Valine配置"></a>Valine配置</h4><p>然后我们去主题配置文件中进行修改<br>主题配置文件路径：<code>matery_config.yml</code><br>找到以下参数进行修改</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Valine.</span><span class="token comment"># You can get your appid and appkey from https://leancloud.cn</span><span class="token comment"># more info please open https://valine.js.org</span><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> true //打开valine评论功能  <span class="token key atrule">appid</span><span class="token punctuation">:</span> 你的leancloud appid   <span class="token key atrule">appkey</span><span class="token punctuation">:</span> 你的leancloud appkey   <span class="token key atrule">notify</span><span class="token punctuation">:</span> false //邮件提醒  <span class="token key atrule">verify</span><span class="token punctuation">:</span> true //评论时是否有验证码，需要在Leancloud 设置<span class="token punctuation">-</span><span class="token punctuation">&gt;</span>安全中心 中打开  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> 说点什么吧！ //评论框默认显示  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> hide //评论者的头像<span class="token punctuation">,</span>我这里设置的不显示  <span class="token key atrule">guest_info</span><span class="token punctuation">:</span> nick <span class="token comment"># custom comment header</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span> <span class="token comment"># pagination size</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：评论者头像可以进行如下设置  </p><p><img src="https://cimg1.17lai.site/data/2021/09/1120210911135034.png"></p><p>到此，一个极简评论系统就完成啦！</p><h2 id="系列教程"><a href="#系列教程" class="headerlink" title="系列教程"></a><strong>系列教程</strong></h2><p><a href="https://blog.17lai.site/atom.xml">全部文章RSS订阅</a></p><p><strong>Hexo系列</strong>&nbsp;<a href="https://blog.17lai.site/categories/hexo/atom.xml"><strong>HexoRSS分类订阅</strong></a></p><p>[三万字教程]基于Hexo的matery主题搭建博客并深度优化完全一站式教程</p><ul><li><p><a href="https://blog.17lai.site/posts/40300608/">Hexo Docker环境与Hexo基础配置篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/4d8a0b22/">hexo博客自定义修改篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/9b056c86/">hexo博客网络优化篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/5311b619/">hexo博客增强部署篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/4a2050e2/">hexo博客个性定制篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/84b4059a/">hexo博客常见问题篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/cf0f47fd/">Hexo Markdown以及各种插件功能测试</a></p></li></ul><blockquote><ul><li>markdown 各种其它语法插件</li><li>latex公式支持</li><li>mermaid图表</li><li>plant uml图表</li><li>URL卡片</li><li>bilibili卡片</li><li>github卡片</li><li>豆瓣卡片</li><li>插入音乐和视频</li><li>插入脑图</li></ul></blockquote><p><strong>Docker系列</strong>&nbsp;<a href="https://blog.17lai.site/categories/docker/atom.xml"><strong>Docker 分类 RSS 订阅</strong></a></p><ul><li><a href="https://blog.17lai.site/posts/42b6a86d/">Docker使用简明教程</a></li><li><a href="https://blog.17lai.site/posts/9912bd5d/">使用jeckett,sonarr,iyuu,qt,emby打造全自动追剧流程</a></li><li><a href="https://blog.17lai.site/posts/1802a8a7/">为知笔记私有化Docker部署</a></li><li><a href="https://blog.17lai.site/posts/593cc323/">Earthly 一个更加强大的镜像构建工具</a></li><li><a href="https://blog.17lai.site/posts/90e60aac/">使用 Shell 脚本实现一个简单 Docker</a></li><li><a href="https://blog.17lai.site/posts/465d2738/">如何使用Traefik V2 在Ubuntu20.04 上面来做 Dockers</a></li><li><a href="https://blog.17lai.site/posts/462f1e5c/">通过IPV6访问Qnap NAS中Docker的服务</a></li></ul><p><strong>笔记系列</strong>&nbsp;<a href="https://blog.17lai.site/categories/note/atom.xml"><strong>Note分类RSS订阅</strong></a></p><ul><li><a href="https://blog.17lai.site/posts/a8535f26/">完美笔记进化论</a></li></ul><blockquote><p>经历了很长时间，使用了各种各样的方案，最终选择了一种相对完美的方式。docker私有部署运行的joplin，使用markdown语法，github作为图床，picgo作为图像自动上传后端，pypora作为MD编辑器，Snipaste作为截图工具。后备gitlab ee selfhost备份，自建图床VPS多线负载均衡。cloudflare partner cdn加速，jsdelivr加速。</p><ul><li>pigo图床搭建与配置</li><li>Joplin教程</li><li>Snipaste截图工具</li><li>Typora 作为Markdown编辑器最强</li></ul></blockquote><ul><li><a href="https://blog.17lai.fun/posts/e6086437/">Joplin入门指南&amp;实践方案</a></li></ul><blockquote><ul><li>Joplin和使用</li><li>Joplin同步与备份</li><li>Joplin导入与导出</li></ul></blockquote><ul><li><a href="https://blog.17lai.fun/posts/45f878cd/">替代Evernote免费开源笔记Joplin-网盘同步笔记历史版本Markdown可视化</a></li></ul><blockquote><ul><li>Joplin安装使用，调用外部编辑器，网盘同步等等</li></ul></blockquote><ul><li><a href="https://blog.17lai.site/posts/92d347d6/">Joplin 插件以及其Markdown语法。All in One!</a></li></ul><blockquote><ul><li>Joplin简明教程</li><li>markdown语法简明教程</li></ul></blockquote><ul><li><a href="https://blog.17lai.site/posts/e3ee7f8b/">Joplin 插件使用推荐</a></li></ul><blockquote><ul><li>教你用各种插件打造一个强大的笔记工具。</li></ul></blockquote><ul><li><a href="https://blog.17lai.site/posts/1802a8a7/">为知笔记私有化Docker部署</a></li></ul><blockquote><ul><li>如何部署自己私有的为知笔记。</li><li>其实博主更推荐私有部署joplin</li></ul></blockquote><p><strong>Gitbook使用系列</strong>&nbsp;<a href="https://blog.17lai.site/categories/gitbook/atom.xml">Gitbook分类RSS订阅</a></p><ul><li><p><a href="https://blog.17lai.site/posts/7fe86002/">GitBook+GitLab撰写发布技术文档-Part1:GitBook篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/7790e989/">GitBook+GitLab撰写发布技术文档-Part2:GitLab篇</a></p></li><li><p><a href="https://blog.17lai.site/posts/d6bad1e5/">自己动手制作电子书的最佳方式（支持PDF、ePub、mobi等格式）</a></p></li></ul><p><strong>Gitlab 使用系列</strong>&nbsp;<a href="https://blog.17lai.site/categories/gitlab/atom.xml"><strong>Gitlab RSS 分类订阅</strong></a></p><ul><li><a href="https://blog.17lai.site/posts/acc13b70/"><strong>Gitlab的安装及使用教程完全版</strong></a></li><li><a href="https://blog.17lai.site/posts/29a820b3/">破解Gitlab EE</a></li><li><a href="https://blog.17lai.site/posts/d08eb7b/">Gitlab的安装及使用</a></li><li><a href="https://blog.17lai.site/posts/1879721e/">CI/CD与Git Flow与GitLab</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> hexo </tag>
            
            <tag> matery </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础笔记</title>
      <link href="/2022/08/08/java-ji-chu-bi-ji/"/>
      <url>/2022/08/08/java-ji-chu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="一、java基础入门"><a href="#一、java基础入门" class="headerlink" title="一、java基础入门"></a>一、java基础入门</h1><h1 id="1、JDK与JRE的区别"><a href="#1、JDK与JRE的区别" class="headerlink" title="1、JDK与JRE的区别"></a>1、JDK与JRE的区别</h1><p><img src="https://s1.328888.xyz/2022/08/08/0sSYP.png"></p><p>JDK = JRE + 开发工具集（例如javac编译工具等）</p><p>JRE = JVM + javaSE标准类库</p><h2 id="2、梦开始的地方"><a href="#2、梦开始的地方" class="headerlink" title="2、梦开始的地方"></a>2、梦开始的地方</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这是一个java的快速入门</span><span class="token comment">// 对代码的相关说明﻿</span><span class="token comment">// 1、 public class Hello 表示Hello是一个类，是一个public的公有的类</span><span class="token comment">// 2、Hello{} 表示一个类的开始和结束</span><span class="token comment">// 3、public static void main(String[] args) 表示一个主方法，即我们程序的入口</span><span class="token comment">// 4、main() {} 表示方法的开始和结束</span><span class="token comment">// 5、System.out.println("Hello,work~");表示输出"Hello,work~"到屏幕</span><span class="token comment">// 6、; 表示语句结束﻿﻿</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span><span class="token string">"Hello,Word~"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>运行原理示意图：</strong></p><p><img src="https://s1.328888.xyz/2022/08/08/0PIqF.jpg"></p><p>一、什么是编译</p><p>javac Hallo.java</p><p>1、有了java源文件，通过编译器将其编译成JVM可以识别的字节码文件。</p><p>2、在该源文件目录下，通过javac编译工具对Hallo.java文件进行编译。</p><p>3、如果程序没有错误，没有任何提示，且在当前目录下会出现一个Hello.class文件，该文件称为字节码文件</p><p>二、什么是运行</p><p>1、有了可执行的java程序（Hello.class字节码文件）</p><p>2、通过运行工具java.exe对字节码文件进行执行</p><p>3、对修改后的的Hallo.java源文件需要从新编译，生成新的class 文件后，再执行才能生效</p><h1 id="重写与重载"><a href="#重写与重载" class="headerlink" title="重写与重载"></a><strong>重写与重载</strong></h1><p>重写：表现为多态性</p><p>方法的声明：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">权限修饰符 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span> <span class="token keyword">throws</span> 异常的类型<span class="token punctuation">{</span> <span class="token comment">//方法体</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>子类重写的方法的方法名和形参列表与父类被重写的方法的方法名和形参列表相同</li><li>子类重写的方法的权限修饰符不小于父类被重写的方法的权限修饰符</li><li>特殊情况：子类不能重写父类中声明为private权限的方法</li><li>返回值类型：</li><li>父类被重写的方法的返回值类型是void，则子类重写的方法的返回值类型只能是void</li><li>父类被重写的方法的返回值类型是A类型，则子类重写的方法的返回值类型可以是A类或A类的子类</li><li>父类被重写的方法的返回值类型是基本数据类型(比如：double)，则子类重写的方法的返回值类型必须是相同的基本数据类型(必须也是double)</li><li>子类重写的方法抛出的异常类型不大于父类被重写的方法抛出的异常类型</li><li>约定俗称：子类中的叫重写的方法，父类中的叫被重写的方法</li><li>子类和父类中的同名同参数的方法要么都声明为非static的（考虑重写，要么都声明为static的（不是重写)。</li></ul><p><strong>存在与父子之间，</strong></p><p><strong>重写方法overwrite 方法名相同、参数列表、返回值相同。</strong></p><p><strong>子类方法不能降低父类方法的权限、子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)。</strong></p><p><strong>方法被定义为 final 不能被重写。</strong></p><p><strong>重载：不表现为多态性。</strong></p><ul><li>存在与父子及同类中</li><li>重载方法方法名相同，参数列表及个数不同</li></ul><p><strong>重载，是指允许存在多个同名方法，而这些方法的参数不同。编译器根据方法不同的参数表，对同名方法的名称做修饰。对于编译器而言，这些同名方法就成了不同的方法。它们的调用地址在编译期就绑定了。Java的重载是可以包括父类和子类的，即子类可以重载父类的同名不同参数的方法。</strong></p><p><strong>所以：对于重载而言，在方法调用之前，编译器就已经确定了所要调用的方法，这称为“早绑定”或“静态绑定”；</strong></p><p><strong>而对于多态，只等到方法调用的那一刻，解释运行器才会确定所要调用的具体方法，这称为“晚绑定”或“动态绑定”。</strong></p><p><strong>引用一句Bruce Eckel的话：“不要犯傻，如果它不是晚绑定，它就不是多态。”</strong></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h3><p><strong>对比：属性 vs 局部变量</strong></p><p><strong>1.相同点：</strong></p><ul><li>定义变量的格式：数据类型 变量名 = 变量值</li><li>先声明，后使用</li><li>变量都其对应的作用域</li></ul><p><strong>2.不同点：</strong></p><ul><li>在类中声明的位置的不同</li><li>属性：直接定义在类的一对{}内</li><li>局部变量：声明在方法内、方法形参、代码块内、构造器形参、构造器内部的变量</li><li>关于权限修饰符的不同</li><li>属性：可以在声明属性时，指明其权限，使用权限修饰符。</li><li>常用的权限修饰符：private、public、缺省、protected —&gt;封装性</li><li>目前，大家声明属性时，都使用缺省就可以了。</li><li>局部变量：不可以使用权限修饰符。</li><li>默认初始化值的情况：</li><li>属性：类的属性，根据其类型，都默认初始化值。</li><li>整型（byte、short、int、long：0）</li><li>浮点型（float、double：0.0）</li><li>字符型（char：0 （或’\u0000’））</li><li>布尔型（boolean：false）</li><li>引用数据类型（类、数组、接口：null）</li><li>局部变量：没默认初始化值。</li><li>意味着，我们在调用局部变量之前，一定要显式赋值。</li><li>特别地：形参在调用时，我们赋值即可。</li><li>在内存中加载的位置：</li><li>属性：加载到堆空间中 （非static）</li><li>局部变量：加载到栈空间</li></ul><p><strong>属性赋值顺序</strong></p><ul><li>总结：属性赋值的先后顺序</li><li>① 默认初始化</li><li>② 显式初始化</li><li>③ 构造器中初始化</li><li>④ 通过”对象.方法” 或 “对象.属性”的方式，赋值</li><li>以上操作的先后顺序：① - ② - ③ - ④</li></ul><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><h1 id="方法的声明："><a href="#方法的声明：" class="headerlink" title="方法的声明："></a>方法的声明：</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java">权限修饰符 返回值类型 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">{</span>方法体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p><strong>构造器的作用：</strong></p><p><strong>1.创建对象</strong></p><p><strong>2.初始化对象的信息</strong></p><p>使用说明：</p><ul><li>如果没显式的定义类的构造器的话，则系统默认提供一个空参的构造器</li><li>定义构造器的格式：权限修饰符 类名(形参列表){}</li><li>一个类中定义的多个构造器，彼此构成重载</li><li>一旦我们显式的定义了类的构造器之后，系统就不再提供默认的空参构造器</li><li>一个类中，至少会有一个构造器。</li></ul><h3 id="this"><a href="#this" class="headerlink" title="this"></a><strong>this</strong></h3><p>可以调用的结构：属性、方法；构造器</p><p><strong>this调用属性、方法：</strong></p><p>理解为：当前对象 或 当前正在创建的对象</p><p>在类的方法中，我们可以使用”this.属性”或”this.方法”的方式，调用当前对象属性或方法。但是，</p><ul><li>通常情况下，我们都择省略”this.”。特殊情况下，如果方法的形参和类的属性同名时，我们必须显式</li><li>的使用”this.变量”的方式，表明此变量是属性，而非形参。</li><li>在类的构造器中，我们可以使用”this.属性”或”this.方法”的方式，调用当前正在创建的对象属性或方法。但是，通常情况下，我们都择省略”this.”。特殊情况下，如果构造器的形参和类的属性同名时，我们必须显式的使用”this.变量”的方式，表明此变量是属性，而非形参。</li></ul><p><strong>this调用构造器：</strong></p><ul><li>我们在类的构造器中，可以显式的使用”this(形参列表)”方式，调用本类中指定的其他构造器</li><li>构造器中不能通过”this(形参列表)”方式调用自己</li><li>如果一个类中有n个构造器，则最多有 n - 1构造器中使用了”this(形参列表)”</li><li>规定：”this(形参列表)”必须声明在当前构造器的首行</li><li>构造器内部，最多只能声明一个”this(形参列表)”，用来调用其他的构造器</li></ul><h1 id="super"><a href="#super" class="headerlink" title="super"></a><strong>super</strong></h1><p>可以调用的结构：</p><p><strong>属性、方法、构造器</strong></p><p><strong>super调用属性、方法：</strong></p><ul><li>我们可以在子类的方法或构造器中。通过使用”super.属性”或”super.方法”的方式，显式的调用父类中声明的属性或方法。但是，通常情况下，我们习惯省略”super.”</li><li>特殊情况：当子类和父类中定义了同名的属性时，我们要想在子类中调用父类中声明的属性，则必须显式的使用”super.属性”的方式，表明调用的是父类中声明的属性。</li><li>特殊情况：当子类重写了父类中的方法以后，我们想在子类的方法中调用父类中被重写的方法时，则必须显式的使用”super.方法”的方式，表明调用的是父类中被重写的方法。</li></ul><p><strong>super调用构造器：</strong></p><ul><li>我们可以在子类的构造器中显式的使用”super(形参列表)”的方式，调用父类中声明的指定的构造器</li><li>“super(形参列表)”的使用，必须声明在子类构造器的首行！</li><li>我们在类的构造器中，针对于”this(形参列表)”或”super(形参列表)”只能二一，不能同时出现</li><li>在构造器的首行，没显式的声明”this(形参列表)”或”super(形参列表)”，则默认调用的是父类中空参的构造器：super()</li><li>在类的多个构造器中，至少一个类的构造器中使用了”super(形参列表)”，调用父类中的构造器</li></ul><h1 id="封装性："><a href="#封装性：" class="headerlink" title="封装性："></a><strong>封装性：</strong></h1><p>我们程序设计追求“高内聚，低耦合”。</p><p>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；</p><p>低耦合 ：仅对外暴露少量的方法用于使用。</p><p>隐藏对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。通俗的说，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</p><p>体现一：将类的属性xxx私化(private),同时，提供公共的(public)方法来获取(getXxx)和设置(setXxx)此属性的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> radius<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a><strong>继承性</strong></h1><p><strong>为什么要有类的继承性？(继承性的好处）</strong></p><ul><li>减少了代码的冗余，提高了代码的复用性</li><li>便于功能的扩展</li><li>为之后多态性的使用，提供了前提</li></ul><p><strong>继承性的格式</strong>：</p><p>class A extends B{}</p><ul><li>A:子类、派生类、subclass</li><li>B:父类、超类、基类、superclass</li></ul><p><strong>子类继承父类以后有哪些不同？</strong></p><ul><li>体现：一旦子类A继承父类B以后，子类A中就获取了父类B中声明的所有的属性和方法。</li><li>特别的，父类中声明为private的属性或方法，子类继承父类以后，仍然认为获取了父类中私的结构。只因为封装性的影响，使得子类不能直接调用父类的结构而已。</li><li>子类继承父类以后，还可以声明自己特有的属性或方法：实现功能的拓展。</li><li>子类和父类的关系，不同于子集和集合的关系。</li><li>extends：延展、扩展</li></ul><p><strong>Java中继承性的说明</strong></p><ul><li>一个类可以被多个子类继承。</li><li>Java中类的单继承性：一个类只能有一个父类</li><li>子父类是相对的概念。</li><li>子类直接继承的父类，称为：直接父类。间接继承的父类称为：间接父类</li><li>子类继承父类以后，就获取了直接父类以及所间接父类中声明的属性和方法</li></ul><h1 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h1><p>理解：可以理解为一个事物的多种形态。</p><p>何为多态性：</p><p>父类的引用指向子类的对象（或子类的对象赋给父类的引用）</p><p>Person p = new Man();</p><p>Object obj = new Date();</p><p><strong>多态性的使用：虚拟方法调用</strong></p><ul><li>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法。</li><li>总结：编译，看左边；运行，看右边。</li></ul><p><strong>关于向上转型与向下转型：</strong></p><p>为什么使用向下转型：</p><p>有了对象的多态性以后，内存中实际上是加载了子类特有的属性和方法的，但是由于变量声明为父类类型，导致编译时，只能调用父类中声明的属性和方法。子类特有的属性和方法不能调用。如何才能调用子类特的属性和方法？使用向下转型。</p><p>使用强制类型转换符：()</p><p><strong>注意：</strong></p><ul><li>使用强转时，可能出现ClassCastException的异常。</li><li>为了避免在向下转型时出现ClassCastException的异常，我们在向下转型之前，先进行instanceof的判断，一旦返回true，就进行向下转型。如果返回false，不进行向下转型。</li></ul><h1 id="static"><a href="#static" class="headerlink" title="static"></a><strong>static</strong></h1><p>static:静态的</p><p><strong>可以用来修饰的结构：主要用来修饰类的内部结构</strong></p><p>属性、方法、代码块、内部类</p><p><strong>static修饰属性：静态变量（或类变量）</strong></p><p><strong>属性，是否使用static修饰，又分为：静态属性 vs 非静态属性(实例变量)</strong></p><ul><li>实例变量：我们创建了类的多个对象，每个对象都独立的拥一套类中的非静态属性。当修改其中一个对象中的非静态属性时，不会导致其他对象中同样的属性值的修改。</li><li>静态变量：我们创建了类的多个对象，多个对象共享同一个静态变量。当通过某一个对象修改静态变量时，会导致其他对象调用此静态变量时，是修改过了的。</li></ul><p><strong>static修饰属性的其他说明</strong>：</p><ul><li>静态变量随着类的加载而加载。可以通过”类.静态变量”的方式进行调用</li><li>静态变量的加载要早于对象的创建。</li><li>由于类只会加载一次，则静态变量在内存中也只会存在一份：存在方法区的静态域中。</li><li>类变量 实例变量</li></ul><p>类 yes no</p><p>对象yes yes</p><ul><li>静态属性举例：System.out; Math.PI;</li></ul><p><strong>static修饰方法：静态方法、类方法</strong></p><ul><li>随着类的加载而加载，可以通过”类.静态方法”的方式进行调用</li><li>静态方法 非静态方法</li></ul><p>类 yes no</p><p>对象 yes yes</p><ul><li>静态方法中，只能调用静态的方法或属性</li><li>非静态方法中，既可以调用非静态的方法或属性，也可以调用静态的方法或属性</li></ul><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><ul><li><strong>代码块的作用：用来初始化类、对象的信息</strong></li><li><strong>分类：代码块要是使用修饰符，只能使用static</strong></li><li><strong>静态代码块：</strong></li><li>内部可以输出语句</li><li>随着类的加载而执行,而且只执行一次</li><li>作用：初始化类的信息</li><li>如果一个类中定义了多个静态代码块，则按照声明的先后顺序执行</li><li>静态代码块的执行要优先于非静态代码块的执行</li><li>静态代码块内只能调用静态的属性、静态的方法，不能调用非静态的结构</li><li><strong>非静态代码块：</strong></li><li>内部可以输出语句</li><li>随着对象的创建而执行</li><li>每创建一个对象，就执行一次非静态代码块</li><li>作用：可以在创建对象时，对对象的属性等进行初始化</li><li>如果一个类中定义了多个非静态代码块，则按照声明的先后顺序执行</li><li>非静态代码块内可以调用静态的属性、静态的方法，或非静态的属性、非静态的方法</li></ul><h1 id="final"><a href="#final" class="headerlink" title="final"></a><strong>final</strong></h1><p>final：最终的</p><p><strong>可以用来修饰：类、方法、变量</strong></p><p><strong>.final 用来修饰一个类:此类不能被其他类所继承。</strong></p><ul><li>比如：String类、System类、StringBuffer类</li><li><strong>final 用来修饰方法：表明此方法不可以被重写</strong></li><li>比如：Object类中getClass();</li><li><strong>final 用来修饰变量：此时的”变量”就称为是一个常量</strong></li><li>final修饰属性：可以考虑赋值的位置：显式初始化、代码块中初始化、构造器中初始化</li><li>final修饰局部变量：</li><li>尤其是使用final修饰形参时，表明此形参是一个常量。当我们调用此方法时，给常量形参赋一个实参。一旦赋值以后，就只能在方法体内使用此形参，但不能进行重新赋值。</li><li><strong>static final 用来修饰属性：全局常量</strong></li></ul><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a><strong>abstract</strong></h1><p>抽象的</p><p>1.可以用来修饰：类、方法</p><p>2.具体的：</p><p>abstract修饰类：抽象类</p><ul><li>此类不能实例化</li><li>抽象类中一定有构造器，便于子类实例化时调用（涉及：子类对象实例化的全过程）</li><li>开发中，都会提供抽象类的子类，让子类对象实例化，完成相关的操作 —&gt;抽象的使用前提：继承性</li></ul><p><strong>abstract修饰方法：抽象方法</strong></p><ul><li>抽象方法只方法的声明，没方法体</li><li>包含抽象方法的类，一定是一个抽象类。反之，抽象类中可以没有抽象方法的。</li><li>若子类重写了父类中的所的抽象方法后，此子类方可实例化</li><li>若子类没重写父类中的所的抽象方法，则此子类也是一个抽象类，需要使用abstract修饰</li></ul><p><strong>注意点：</strong></p><ul><li>abstract不能用来修饰：属性、构造器等结构</li><li>abstract不能用来修饰私方法、静态方法、final的方法、final的类</li></ul><h1 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h1><p><strong>使用说明：</strong></p><p>接口使用interface来定义</p><ul><li>Java中，接口和类是并列的两个结构</li></ul><p>如何定义接口：定义接口中的成员</p><ul><li>JDK7及以前：只能定义全局常量和抽象方法</li><li>全局常量：public static final的.但是书写时，可以省略不写</li><li>抽象方法：public abstract的</li><li>JDK8：除了定义全局常量和抽象方法之外，还可以定义静态方法、默认方法（略</li><li>接口中不能定义构造器的！意味着接口不可以实例化</li><li>Java开发中，接口通过让类去实现(implements)的方式来使用.</li><li>如果实现类覆盖了接口中的所抽象方法，则此实现类就可以实例化4.</li><li>如果实现类没覆盖接口中所的抽象方法，则此实现类仍为一个抽象类</li><li>Java类可以实现多个接口 —&gt;弥补了Java单继承性的局限性</li><li>格式：class AA extends BB implements CC,DD,EE</li><li>接口与接口之间可以继承，而且可以多继承</li><li>接口的具体使用，体现多态性</li><li>接口，实际上可以看做是一种规范</li><li>Java8中关于接口的新规范</li></ul><p>//知识点1：接口中定义的静态方法，只能通过接口来调用。</p><p>//知识点2：通过实现类的对象，可以调用接口中的默认方法。</p><p>//如果实现类重写了接口中的默认方法，调用时，仍然调用的是重写以后的方法</p><p>//知识点3：如果子类(或实现类)继承的父类和实现的接口中声明了同名同参数的默认方法，那么子类在没重写此方法的情况下，默认调用的是父类中的同名同参数的方法。–&gt;类优先原则</p><p>//知识点4：如果实现类实现了多个接口，而这多个接口中定义了同名同参数的默认方法，</p><p>//那么在实现类没重写此方法的情况下，报错。–&gt;接口冲突。</p><p>//这就需要我们必须在实现类中重写此方法</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>内部类：类的第五个成员</p><p><strong>定义：Java中允许将一个类A声明在另一个类B中，则类A就是内部类，类B称为外部类.</strong></p><ul><li><strong>内部类的分类：</strong></li></ul><p>成员内部类（静态、非静态 ） vs 局部内部类(方法内、代码块内、构造器内)</p><ul><li><strong>成员内部类的理解：</strong></li></ul><p>一方面，作为外部类的成员：</p><ul><li>调用外部类的结构</li><li>可以被static修饰</li><li>可以被4种不同的权限修饰</li></ul><p>另一方面，作为一个类：</p><ul><li>类内可以定义属性、方法、构造器等</li><li>可以被final修饰，表示此类不能被继承。言外之意，不使用final，就可以被继承</li><li>可以被abstract修饰</li></ul><p>.成员内部类：</p><ul><li>如何创建成员内部类的对象？(静态的，非静态的)</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Overridepublic</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Dog{"</span> <span class="token operator">+</span>                    <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                    <span class="token char">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DogOne</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">DogOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">DogOne</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Overridepublic</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"DogOne{"</span> <span class="token operator">+</span>                    <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                    <span class="token char">'}'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//创建静态的Dog内部类的实例(静态的成员内部类):</span><span class="token class-name">Person<span class="token punctuation">.</span>Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person<span class="token punctuation">.</span>Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建非静态的Bird内部类的实例(非静态的成员内部类):</span><span class="token comment">//Person.Bird bird = new Person.Bird();//错误的</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person<span class="token punctuation">.</span>Bird</span> bird <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Bird</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//返回一个实现了Comparable接口的类的对象</span><span class="token keyword">public</span> <span class="token class-name">Comparable</span> <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//创建一个实现了Comparable接口的类:局部内部类</span><span class="token comment">//方式一：</span>​ <span class="token comment">//方式二：return new Comparable(){</span>​ <span class="token annotation punctuation">@Overridepublic</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&nbsp;&nbsp;<strong>注意点：</strong></p><ul><li>在局部内部类的方法中（比如：show如果调用局部内部类所声明的方法(比如：method)中的局部变量(比如：num)的话,要求此局部变量声明为final的。</li><li>jdk 7及之前版本：要求此局部变量显式的声明为final的</li><li>jdk 8及之后的版本：可以省略final的声明</li><li>总结：</li><li>成员内部类和局部内部类，在编译以后，都会生成字节码文件。</li><li>格式：成员内部类：外部类$内部类名.class</li><li>局部内部类：外部类$数字 内部类名.class</li></ul><h1 id="String、StringBuffer、StringBuilder的区别"><a href="#String、StringBuffer、StringBuilder的区别" class="headerlink" title="String、StringBuffer、StringBuilder的区别"></a><strong>String、StringBuffer、StringBuilder的区别</strong></h1><ul><li>String ，<strong>是只读字符串</strong>，也就意味着 String 引用的字符串内容是不能被改变的。<strong>每次对 String 类型进 行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。</strong></li><li>StringBuilder ：它和 StringBuffer 的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都<strong>没有 被 synchronized 修饰，因此它的效率也比 StringBuffer 要高。</strong>（线程不安全）</li></ul><h1 id="String-s-x3D-new-String-“xyz”-会创建几个对象"><a href="#String-s-x3D-new-String-“xyz”-会创建几个对象" class="headerlink" title="String s = new String(“xyz”)会创建几个对象"></a><strong>String s = new String(“xyz”)会创建几个对象</strong></h1><p>String a = “abc”；</p><p>String b = new String(“abc”);</p><p>这两种声明方法得到的String是不一样的，第一种声明方法得到的String是存储在String常量池里面的，而第二种方式的声明很明显是正常的创建一个对象的使用方法，所以存储在堆中。</p><p>当String类直接赋值时，如果常量池内存在这个字符串，则s1直接指向常量池的地址，若没有，则先在常量池内创建这个字符串对象，s1直接指向常量池这个字符串的内存地址； 当String类使用new实例对象时，首先在堆里创建这个对象，若是常量池内没这个字符串，则也创建一个，然后堆里的对象的value指向常量池内的字符串。</p><p>所以答案是一个或者两个,如果常量池中原来有”abc”,则创建一个对象;如果常量池中原来没有”abc”,那么会创建两个对象</p><h1 id="抽象类和接口有什么区别"><a href="#抽象类和接口有什么区别" class="headerlink" title="抽象类和接口有什么区别"></a><strong>抽象类和接口有什么区别</strong></h1><p>抽象类是对类的的抽象，是一种模板设计，抽象类中可以有抽象方法和非抽像方法。抽象类可以在不提供接口方法实现的情况下实现接口。</p><p>接口是行为的规范，接口中的所有方法都是抽象的。类可以实现很多个接口，但是只能继承一个抽象类。类可以不实现抽象类和接口声明的所有方法，当然， 在这种情况下，类也必须得声明成是抽象的。</p><h1 id="类的实例化顺序"><a href="#类的实例化顺序" class="headerlink" title="类的实例化顺序"></a><strong>类的实例化顺序</strong></h1><ol><li>父类的静态变量</li><li>父类的静态代码块</li><li>子类的静态变量</li><li>子类的静态代码块</li><li>父类非静态变量（父类实例成员变量）</li><li>父类的构造函数</li><li>子类的非静态变量</li><li>子类的构造函数</li></ol><h1 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a><strong>Collection集合</strong></h1><h1 id="Arrlist"><a href="#Arrlist" class="headerlink" title="Arrlist"></a><strong>Arrlist</strong></h1><p><strong>排列有序，可重复、底层数组、查询速度快，增删慢、线程不安全、当容量不够时Arrlist是扩容1.5+1</strong></p><p>总之，ArrayList默认容量是10，如果初始化时一开始指定了容量，或者通过集合作为元素，则容量为指定的大小或参数集合的大小。每次扩容为原来的1.5倍，如果新增后超过这个容量，则容量为新增后所需的最小容量。如果增加0.5倍后的新容量超过限制的容量，则用所需的最小容量与限制的容量进行判断，超过则指定为Integer的最大值，否则指定为限制容量大小。然后通过数组的复制将原数据复制到一个更大(新的容量大小)的数组。</p><p>size和modCount的区别</p><p>可能看了源码有时候还分不清size和modCount的区别，那么这里就用例子来说明。</p><p>size是ArrayList的变量。modCount是ArrayList的父类AbstractList中的变量，默认值为0。</p><p>size记录了ArrayList中元素的数量，modCount记录的是关于元素的数目被修改的次数。modCount在ArrayList的普通操作里可能并没有看出多大用处，但是在涉及到fail-fast就主要是依靠它了。</p><h1 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h1><p>排列有序，可重复、底层数组、查询速度快，增删慢、线程安全 性能较低 当容量不够时Vector是扩容一倍</p><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><p>排列有序，可重复、底层使用双向循环链表数据结构、查询速度慢，增删快、线程不安全 性能较低</p><h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a><strong>HashSet</strong></h1><p>排列无序，不可重复，底层使用Hash表 存取速度快，内部是HashMAP</p><p>无参数的构造函数，此构造函数创建一个大小为16的容器，加载因子为0.75</p><h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a><strong>TreeSet</strong></h1><p>排列无序，不可重复，底层使用二叉数 排序存储，内部是TreeMap的SortedSet</p><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a><strong>HashMap</strong></h1><p>键（key）不可重复，值（Value）可以重复，底层Hash表，线程不安全，允许Key为Null,Value也为Null</p><h4 id="put操作的时候才真正构建table数组"><a href="#put操作的时候才真正构建table数组" class="headerlink" title="put操作的时候才真正构建table数组"></a>put操作的时候才真正构建table数组</h4><p>inflateTable这个方法用于为主干数组table在内存中分配存储空间，通过roundUpToPowerOf2(toSize)可以确保capacity为大于或等于toSize的最接近toSize的二次幂，</p><h4 id="addEntry的实现："><a href="#addEntry的实现：" class="headerlink" title="addEntry的实现："></a>addEntry的实现：</h4><p>resize(2 * table.length);<em>//当size超过临界阈值threshold，并且即将发生哈希冲突时进行扩容</em></p><p>当发生哈希冲突并且size大于阈值的时候，需要进行数组扩容，扩容时，需要新建一个长度为之前数组2倍的新的数组，然后将当前的Entry数组中的元素全部传输过去，扩容后的新数组长度为之前的2倍，所以扩容相对来说是个耗资源的操作。</p><h4 id="为何HashMap的数组长度一定是2的次幂？"><a href="#为何HashMap的数组长度一定是2的次幂？" class="headerlink" title="为何HashMap的数组长度一定是2的次幂？"></a>为何HashMap的数组长度一定是2的次幂？</h4><p>如果数组进行扩容，数组长度发生变化，而存储位置 index = h&amp;(length-1),index也可能会发生变化，需要重新计算。indexHashMap的数组长度一定保持2的次幂，比如16的二进制表示为 10000，那么length-1就是15，二进制为01111，同理扩容后的数组长度为32，二进制表示为100000，length-1为31，二进制表示为011111。从下图可以我们也能看到这样会保证低位全为1，而扩容后只有一位差异，也就是多出了最左位的1，这样在通过 h&amp;(length-1)的时候，只要h对应的最左边的那一个差异位为0，就能保证得到的新的数组索引和老数组索引一致(大大减少了之前已经散列良好的老数组的数据位置重新调换)</p><p>如果不是2的次幂，也就是低位不是全为1此时，要使得index=21，h的低位部分不再具有唯一性了，哈希冲突的几率会变的更大，同时，index对应的这个bit位无论如何不会等于1了，而对应的那些数组位置也就被白白浪费了。</p><p>JDK1.8在JDK1.7的基础上针对增加了红黑树来进行优化。即当链表超过8时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高HashMap的性能，其中会用到红黑树的插入、删除、查找等算法。</p><h1 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a><strong>ConcurrentHashMap</strong></h1><p>在jdk1.8中主要是采用了CAS算法实现线程安全的。在以前的ConcurrentHashMap中是锁定了Segment，而在jdk1.8被移除，现在锁定的是一个Node头节点</p><p>在ConcurrentHashMap中不是直接存储TreeNode来实现的，而是用TreeBin来包装TreeNode来实现的。也就是说在实际的ConcurrentHashMap桶中，存放的是TreeBin对象，而不是TreeNode对象。之所以TreeNode继承自Node是为了附带next指针，而这个next指针可以在TreeBin中寻找下一个TreeNode，这里也是与HashMap之间比较大的区别。</p><p>扩容时：</p><p>数组中（桶中）总共分为3种存储情况：空，链表头，TreeBin头</p><ul><li>①遍历原来的数组（原table），如果数组中某个值为空，则直接放置一个forwordingNode。</li><li>②如果数组中某个值不为空，而是一个链表头结点，那么就对这个链表进行拆分为两个链表，存储到nextTable对应的两个位置。</li><li>③如果数组中某个值不为空，而是一个TreeBin头结点，那么这个地方就存储的是红黑树的结构，这样一来，处理就会变得相对比较复杂，就需要先判断需不需要把树转换为链表，做完一系列的处理，然后把对应的结果存储在nextTable的对应两个位置。</li></ul><p><strong>put:</strong></p><p>再这之前，先简单说一下PUT的具体操作：</p><ul><li>①先传入一个k和v的键值对，不可为空（HashMap是可以为空的），如果为空就直接报错。</li><li>②接着去判断table是否为空，如果为空就进入初始化阶段。</li><li>③如果判断数组中某个指定的桶是空的，那就直接把键值对插入到这个桶中作为头节点，而且这个操作不用加锁。</li><li>④如果这个要插入的桶中的hash值为-1，也就是MOVED状态（也就是这个节点是forwordingNode），那就是说明有线程正在进行扩容操作，那么当前线程就进入协助扩容阶段。</li><li>⑤需要把数据插入到链表或者树中，如果这个节点是一个链表节点，那么就遍历这个链表，如果发现有相同的key值就更新value值，如果遍历完了都没有发现相同的key值，就需要在链表的尾部插入该数据。插入结束之后判断该链表节点个数是否大于8，如果大于就需要把链表转化为红黑树存储。</li><li>⑥如果这个节点是一个红黑树节点，那就需要按照树的插入规则进行插入。</li><li>⑦put结束之后，需要给map已存储的数量+1，在addCount方法中判断是否需要扩容</li></ul><h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a><strong>Java内存模型</strong></h1><ul><li>a、lock（锁定）：在某一个线程在读取主内存的时候需要把变量锁定。</li><li>b、unlock（解锁）：某一个线程读取玩变量值之后会释放锁定，别的线程就可以进入操作</li><li>c、read（读取）：从主内存中读取变量的值并放入工作内存中</li><li>d、load（加载）：从read操作得到的值放入工作内存变量副本中</li><li>e、use（使用）：把工作内存中的一个变量值传递给执行引擎</li><li>f、assign（赋值）：它把一个从执行引擎接收到的值赋值给工作内存的变量</li><li>g、store（存储）：把工作内存中的一个变量的值传送到主内存中</li><li>h、write（写入）：把store操作从工作内存中一个变量的值传送到主内存的变量中。</li></ul><h4 id="volatile-（可见性）内存屏障"><a href="#volatile-（可见性）内存屏障" class="headerlink" title="volatile:（可见性）内存屏障"></a>volatile:（可见性）内存屏障</h4><p>如果对声明了volatile的变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据写回到系统内存。</p><p>在多处理器下，为了保证各个处理器的缓存是一致的，就会实现<strong>缓存一致性</strong>协议，<strong>每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期</strong>了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里。</p><ul><li>Lock前缀的指令会引起处理器缓存写回内存；</li><li>一个处理器的缓存回写到内存会导致其他处理器的缓存失效；</li><li>当处理器发现本地缓存失效后，就会从内存中重读该变量数据，即可以获取当前最新值。</li></ul><p>这样针对volatile变量通过这样的机制就使得每个线程都能获得该变量的最新值。</p><h5 id="volatile的内存语义实现"><a href="#volatile的内存语义实现" class="headerlink" title="volatile的内存语义实现"></a>volatile的内存语义实现</h5><p>为此，JMM采取了保守策略：</p><ol><li>在每个volatile写操作的<strong>前面</strong>插入一个StoreStore屏障；</li><li>在每个volatile写操作的<strong>后面</strong>插入一个StoreLoad屏障；</li><li>在每个volatile读操作的<strong>后面</strong>插入一个LoadLoad屏障；</li><li>在每个volatile读操作的<strong>后面</strong>插入一个LoadStore屏障。</li></ol><p>需要注意的是：volatile写是在前面和后面<strong>分别插入内存屏障</strong>，而volatile读操作是在<strong>后面插入两个内存屏障</strong></p><h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a><strong>CAS</strong></h1><p>CAS是指compare and swap，意识是指一个旧的预期值A,主内存的值是B，要修改的值C，当且仅当A==B的时候，A的值才会被修改成C，而且这个操作是<strong>原子性</strong>的，是一个非阻塞性的 <strong>乐观锁</strong></p><p><strong>ABA问题</strong>：当CPU1从缓存里面读到了数值A，另一个CPU2这时候也从缓存里面读到了A，然后将他主内存里面的值先修改成B，再将他修改成A，释放缓存锁，此时CPU1获取到缓存锁，去读主内存里面的值，发现还是A，判断相等修改新值，这在CPU1的线程里面看起来是没有任何改变，但实际上主内存里面这块地址的值已经有了一个A-&gt;B-&gt;A的改变，自从jdk1.5之后，加入了AtomicStampedReference类来防止这个问题，通过将引用和版本号作为一个tuple来防止ABA问题，那么修改结果就会变成1A-&gt;1B-&gt;2A，就能看到内存里面这个值的改变。</p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a><strong>栈</strong></h1><p>栈是限制插入和删除只能在同一个位置上进行的表，该位置是该表的末端，叫做栈顶，对栈的操作只有push(进栈)和pop （出栈）栈是后进先出的访问、插入和删除只能在栈顶进行</p><h1 id="类加载生命周期"><a href="#类加载生命周期" class="headerlink" title="类加载生命周期"></a><strong>类加载生命周期</strong></h1><p>加载、链接（验证、准备、解析）、初始化</p><h1 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a><strong>类加载</strong></h1><p><strong>（加载）</strong></p><p>加载指的是将类的class文件读入到内存，并为之创建一个java.lang.Class对象，也就是说，当程序中使用任何类时，系统都会为之建立一个java.lang.Class对象。</p><p>类的加载由类加载器完成，类加载器通常由JVM提供，这些类加载器也是前面所有程序运行的基础，JVM提供的这些类加载器通常被称为系统类加载器。除此之外，开发者可以通过继承ClassLoader基类来创建自己的类加载器。</p><p><strong>(链接)</strong></p><p><strong>验证：</strong></p><p>验证的目的在于确保Class文件的字节流中包含信息符合当前虚拟机要求，不会危害虚拟机自身安全。其主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证。</p><ul><li><strong>文件格式验证：</strong>主要验证字节流是否符合Class文件格式规范，并且能被当前的虚拟机加载处理。例如：主，次版本号是否在当前虚拟机处理的范围之内。常量池中是否有不被支持的常量类型。指向常量的中的索引值是否存在不存在的常量或不符合类型的常量。</li><li><strong>元数据验证：</strong>对字节码描述的信息进行语义的分析，分析是否符合java的语言语法的规范。</li><li><strong>字节码验证：</strong>最重要的验证环节，分析数据流和控制，确定语义是合法的，符合逻辑的。主要的针对元数据验证后对方法体的验证。保证类方法在运行时不会有危害出现。</li><li><strong>符号引用验证：</strong>主要是针对符号引用转换为直接引用的时候，是会延伸到第三解析阶段，主要去确定访问类型等涉及到引用的情况，主要是要保证引用一定会被访问到，不会出现类等无法访问的问题。</li></ul><p><strong>准备：</strong></p><p>类准备阶段负责为类的静态变量分配内存，并设置默认初始值。</p><p><strong>解析：</strong></p><p>将类的二进制数据中的符号引用替换成直接引用。说明一下：符号引用：符号引用是以一组符号来描述所引用的目标，符号可以是任何的字面形式的字面量，只要不会出现冲突能够定位到就行。布局和内存无关。直接引用：是指向目标的指针，偏移量或者能够直接定位的句柄。该引用是和内存中的布局有关的，并且一定加载进来的。</p><p><strong>初始化：</strong></p><p>是为类的静态变量赋予正确的初始值，准备阶段和初始化阶段看似有点矛盾，其实是不矛盾的，如果类中有语句：private static int a = 10，它的执行过程是这样的，首先字节码文件被加载到内存后，先进行链接的验证这一步骤，验证通过后准备阶段，给a分配内存，因为变量a是static的，所以此时a等于int类型的默认初始值0，即a=0,然后到解析（后面在说），到初始化这一步骤时，才把a的真正的值10赋给a,此时a=10。</p><h1 id="类加载时机："><a href="#类加载时机：" class="headerlink" title="类加载时机："></a><strong>类加载时机：</strong></h1><ul><li>1.创建类的实例 ，new 生成对象</li><li>2.访问类的静态变量，或静态变量的赋值</li><li>3.调用类的静态方法</li><li>4.使用反射获取类的信息，强制创建类的实例对象，newInstance</li><li>5.初始化某个类的子类时，会初始化父类</li><li>6.直接使用java.exe运行某个类的主类,main方法，会初始化</li><li>说明：如果访问某个类的final变量，则不进行初始化</li></ul><h1 id="类加载器："><a href="#类加载器：" class="headerlink" title="类加载器："></a><strong>类加载器：</strong></h1><p>在Java中，一个类用其全限定类名（包括包名和类名）作为标识；但在JVM中，一个类用其全限定类名和其类加载器作为其唯一标识。</p><p><strong>根类加载器</strong></p><p>（bootstrap class loader）:它用来加载 Java 的核心类，是用原生代码来实现的，并不继承自 java.lang.ClassLoader（负责加载$JAVA_HOME中jre/lib/rt.jar里所有的class，由C++实现，不是ClassLoader子类）。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。</p><p><strong>扩展类加载器</strong></p><p>（extensions class loader）：它负责加载JRE的扩展目录，lib/ext或者由java.ext.dirs系统属性指定的目录中的JAR包的类。由Java语言实现，父类加载器为null。</p><p><strong>系统类加载器（system class loader）：</strong></p><p>被称为系统（也称为应用）类加载器，它负责在JVM启动时加载来自Java命令的-classpath选项、java.class.path系统属性，或者CLASSPATH换将变量所指定的JAR包和类路径。程序可以通过ClassLoader的静态方法getSystemClassLoader()来获取系统类加载器。如果没有特别指定，则用户自定义的类加载器都以此类加载器作为父加载器。由Java语言实现，父类加载器为ExtClassLoader。</p><p><strong>类加载器加载Class大致要经过如下8个步骤：</strong></p><ul><li>1.检测此Class是否载入过，即在缓冲区中是否有此Class，如果有直接进入第8步，否则进入第2步。</li><li>2.如果没有父类加载器，则要么Parent是根类加载器，要么本身就是根类加载器，则跳到第4步，如果父类加载器存在，则进入第3步。</li><li>3..请求使用父类加载器去载入目标类，如果载入成功则跳至第8步，否则接着执行第5步。</li><li>4.请求使用根类加载器去载入目标类，如果载入成功则跳至第8步，否则跳至第7步。</li><li>5.当前类加载器尝试寻找Class文件，如果找到则执行第6步，如果找不到则执行第7步。</li><li>6.从文件中载入Class，成功后跳至第8步。</li><li>7.抛出ClassNotFountException异常。</li><li>8.返回对应的java.lang.Class对象。</li></ul><h1 id="类加载机制："><a href="#类加载机制：" class="headerlink" title="类加载机制："></a>类加载机制：</h1><p><strong>全盘负责：</strong></p><p>所谓全盘负责，就是当一个类加载器负责加载某个Class时，该Class所依赖和引用其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入。</p><p><strong>双亲委派：</strong></p><p>所谓的双亲委派，则是先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类。通俗的讲，就是某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父加载器，依次递归，如果父加载器可以完成类加载任务，就成功返回；只有父加载器无法完成此加载任务时，才自己去加载。</p><p><strong>缓存机制</strong></p><p>缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区中搜寻该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓冲区中。这就是为很么修改了Class后，必须重新启动JVM，程序所做的修改才会生效的原因。</p><p><strong>双亲委派机制</strong></p><p>其工作原理的是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式，即每个儿子都很懒，每次有活就丢给父亲去干，直到父亲说这件事我也干不了时，儿子自己才想办法去完成。</p><p>*<em>双亲委派机制的优势：采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次。其次是考虑到安全因素，java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.<strong><strong>Integer</strong></strong>的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.<strong><strong>Integer</strong></strong>，而直接返回已加载过的</em><em><strong>Integer</strong></em><em>.<strong><strong>class</strong></strong>，这样便可以防止核心API库被随意篡改。</em>*</p><h1 id="内存区域："><a href="#内存区域：" class="headerlink" title="内存区域："></a>内存区域：</h1><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a><strong>程序计数器</strong></h3><p>一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</p><p><strong>该区域是属于线程私有的,因为在多线程环境中CPU通过在不同的线程来高速切换，此时程序计数器需要记录当前线程执行到哪一步了，以便下一次CPU可以在这个记录点上继续执行。</strong></p><p>此内存区域是唯一一个在Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p><h3 id="Java-虚拟机栈（线程私有）"><a href="#Java-虚拟机栈（线程私有）" class="headerlink" title="Java 虚拟机栈（线程私有）"></a>Java 虚拟机栈（线程私有）</h3><p>线程私有的，它的生命周期与线程相同。虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧（ Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><p>局部变量表存放了编译期可知的8种基本数据类型.对象引用</p><p>局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p><p>栈帧随着方法调用而创建，随着方法结束而销毁——无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异</p><p>常）都算作方法结束</p><p><strong>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常</strong></p><p><strong>如果虚拟机栈扩展时无法申请到足够的内存时会抛出 OutOfMemoryError 异常。</strong></p><h3 id="本地方法栈（线程私有）"><a href="#本地方法栈（线程私有）" class="headerlink" title="本地方法栈（线程私有）"></a>本地方法栈（线程私有）</h3><p>与虚拟机栈所发挥的作用是非常相似的，其区别不过是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的 Native方法服务。<strong>有的虚拟机（譬如 Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。</strong></p><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><p>Java堆是 Java 虚拟机所管理的内存中最大的一块。 Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆（ ” Garbage Collected Heap）。如果从内存回收的角度看，Java堆又会划分为好几个区域(新时代，老年代，等等)如果从内存分配的角度看，线程共享的 Java 堆中可能划分出多个线程私有的分配缓冲区。但无论怎么去划分，无论那个区域，java堆中存储的依然是对象的实例。进一步划分的目的是为了更好地回收内存，或者更快地分配内存。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出 OutOfMemoryError 异常。</p><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p><strong>与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</strong></p><p>HotSpot 虚拟机上很多人愿意把方法区称为“永久代”（ Permanent Generation），本质上两者并不等价，仅仅是因为 HotSpot 虚拟机的设计团队选择把GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已。对于其他虚拟机（如 BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。</p><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版</p><p>本、字段、方法、接口等描述等信息外，还有一项信息是常量池</p><p>（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加</p><p>载后存放到方法区的运行时常量池中。 Java 虚拟机对 Class 文件的每一部分（自然也包括常量</p><p>池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会</p><p>被虚拟机认可、装载和执行。</p><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域，但这部分内存也被频繁的使用，而且也会导致OutOfMemoryError异常。</p><h1 id="GC"><a href="#GC" class="headerlink" title="GC"></a><strong>GC</strong></h1><p><strong>基本流程：</strong></p><p>从Java GC的角度解读代码：程序20行new的Person对象会首先会进入年轻代的Eden中（如果对象太大可能直接进入年老代）。在GC之前对象是存在Eden和from中的，进行GC的时候Eden中的对象被拷贝到To这样一个survive空间（survive（幸存）空间：包括from和to，他们的空间大小是一样的，又叫s1和s2）中（有一个拷贝算法），From中的对象（算法会考虑经过GC幸存的次数）到一定次数（阈值（如果说每次GC之后这个对象依旧在Survive中存在，GC一次他的Age就会加1，默认15就会放到OldGeneration。但是实际情况比较复杂，有可能没有到阈值就从Survive区域直接到Old Generation区域。在进行GC的时候会对Survive中的对象进行判断，Survive空间中有一些对象Age是一样的，也就是经过的GC次数一样，年龄相同的这样一批对象的总和大于等于Survive空间一半的话，这组对象就会进入old Generation中，（是一种动态的调整））），会被复制到OldGeneration，如果没到次数From中的对象会被复制到To中，复制完成后To中保存的是有效的对象，Eden和From中剩下的都是无效的对象，这个时候就把Eden和From中所有的对象清空。在复制的时候Eden中的对象进入To中，To可能已经满了，这个时候Eden中的对象就会被直接复制到Old Generation中，From中的对象也会直接进入Old Generation中。就是存在这样一种情况，To比较小，第一次复制的时候空间就满了，直接进入old Generation中。复制完成后，To和From的名字会对调一下，因为Eden和From都是空的，对调后Eden和To都是空的，下次分配就会分配到Eden。一直循环这个流程。好处：使用对象最多和效率最高的就是在Young Generation中，通过From to就避免过于频繁的产生FullGC（Old Generation满了一般都会产生FullGC）</p><p><strong>回收算法：</strong></p><p><strong>引用计数算法：</strong></p><p>正如算法名，这个算法就是给对象增加一个引用计数，每当对象被别的对象引用时，就将该对象的引用计数加一。所以当一个对象的引用计数为0的话，那么就说明这个对象没有被任何对象使用，那么JVM就可以认为这个对象是可以回收的对象啦。</p><p>缺点也很明显，1.无法区分循环引用的对象（A引用了B，B引用了A），这2个对象的引用计数永远不可能为0，这2个对象无法被JVM回收。2.需要维护对象引用计数的值。</p><p><strong>可达性算法：</strong></p><p>这个算法就是通过 GC Roots 的对象作为起始点，然后通过这个节点往下找他引用的对象，直到最外层的叶子节点。当一个对象无法被 GC Roots 找到时，那么它就是可回收对象。</p><p><strong>标记清除算法</strong></p><p>这是最基础的垃圾回收算法，之所以说它是最基础的是因为它最容易实现，思想也是最简单的。标记-清除算法分为两个阶段：标记阶段和清除阶段。标记阶段的任务是标记出所有需要被回收的对象，清除阶段就是回收被标记的对象所占用的空间。</p><p>该算法会产生大量的内存碎片，可能会导致当JVM要分配大对象内存时，不能找到可用的内存空间的问题。</p><p><strong>复制</strong></p><p>将内存划分为等大小的两块。每次只使用其中一块，当这一块内存满后将尚存活的对象复制到另一块上去，然后把满的那块内存清掉。</p><p>不会产生内存碎片了，但是可利用的内存将变成原来内存的一半，而且需要付出复制内存对象带来的消耗。</p><p><strong>标记压缩</strong></p><p>结合了以上两个算法，为了避免缺陷而提出。先找出存活对象，然后把存活的对象移向内存的一端。然后清除端边界外的对象。</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><p>分代收集法是目前大部分JVM所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将GC堆划分为新生代，老生代，永久代（元数据区）。因为不同的区域，其存储对象的特点不同，因此可以根据不同区域选择不同的算法。新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，回收频率很高，老生代的特点是每次垃圾回收时只有少量对象需要被回收，回收频率很低。</p><h3 id="垃圾回收器："><a href="#垃圾回收器：" class="headerlink" title="垃圾回收器："></a>垃圾回收器：</h3><h4 id="年轻代垃圾回收器"><a href="#年轻代垃圾回收器" class="headerlink" title="年轻代垃圾回收器"></a>年轻代垃圾回收器</h4><p><strong>serial</strong></p><p>单线程回收垃圾，它在进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集完成。</p><p>Serial收集器依然是虚拟机运行在Client模式下默认新生代收集器，对于运行在Client模式下的虚拟机来说是一个很好的选择。</p><p><strong>parallel new</strong></p><p>ParNew收集器其实就是Serial收集器的多线程版本，除了使用多线程进行垃圾收集之外，其余行为包括Serial收集器可用的所有控制参数、收集算法、Stop The Worl、对象分配规则、回收策略等都与Serial 收集器完全一样。</p><p>ParNew收集器是许多运行在Server模式下的虚拟机中首选新生代收集器，其中有一个与性能无关但很重要的原因是，除Serial收集器之外，目前只有ParNew它能与CMS收集器配合工作。</p><p><strong>Parallel Scavenge</strong></p><p>Parallel Scavenge收集器是一个新生代收集器，它也是使用复制算法的收集器，是并行的多线程收集器</p><p>该收集器的目标是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是CPU用于运行用户代码的时间与CPU总消耗时间的比值，即 吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）</p><p>停顿时间越短就越适合需要与用户交互的程序，良好的响应速度能提升用户体验，而高吞吐量则可用高效率地利用CPU时间，尽快完成程序的运算任务，主要适合在后台运算而不需要太多交互的任务。</p><h4 id="老年代垃圾回收器"><a href="#老年代垃圾回收器" class="headerlink" title="老年代垃圾回收器"></a>老年代垃圾回收器</h4><p><strong>serial old</strong></p><p>老年代的垃圾回收器，它是一个单线程收集器，使用标记整理算法。</p><p>主要两大用途：</p><p>（1）在JDK1.5以及之前的版本中与Parallel Scavenge收集器搭配使用</p><p>（2）作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用</p><p><strong>parallel old</strong></p><p>Parallel Old 是Parallel Scavenge收集器的老年代版本，使用多线程和“标记-整理”算法。</p><p><strong>CMS(Concurrent Mark Sweep)收集器</strong></p><p>是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网站或者B/S系统的服务端上，这类应用尤其重视服务器的响应速度，希望系统停顿时间最短，以给用户带来较好的体验。CMS收集器就非常符合这类应用的需求</p><p>CMS收集器是基于“标记-清除”算法实现的。它的运作过程相对前面几种收集器来说更复杂一些，整个过程分为4个步骤：</p><p>1.初始标记</p><p>2.并发标记</p><p>3.重新标记</p><p>4.并发清除</p><p><strong>G1</strong></p><p>JAVA8之后广泛使用，G1 将整个对区域划分为若干个Region，每个Region的大小是2的倍数（1M,2M,4M,8M,16M,32M，通过设置堆的大小和Region数量计算得出。</p><p>Region区域划分与其他收集类似，不同的是单独将大对象分配到了单独的region中，会分配一组连续的Region区域（Humongous start 和 humonous Contoinue 组成），所以一共有四类Region（Eden，Survior，Humongous和Old），</p><p>G1 作用于整个堆内存区域，设计的目的就是减少Full GC的产生。在Full GC过程中由于G1 是单线程进行，会产生较长时间的停顿。</p><p>G1的OldGc标记过程可以和yongGc并行执行，但是OldGc一定在YongGc之后执行，即MixedGc在yongGC之后执行。</p><h4 id="finalized"><a href="#finalized" class="headerlink" title="finalized"></a>finalized</h4><p><strong>finalize()的功能 :</strong></p><p>一旦垃圾回收器准备释放对象所占的内存空间, 如果对象覆盖了finalize()并且函数体内不能是空的, 就会首先调用对象的finalize(), 然后在下一次垃圾回收动作发生的时候真正收回对象所占的空间.</p><p>finalize()有一个特点就是: JVM始终只调用一次. 无论这个对象被垃圾回收器标记为什么状态, finalize()始终只调用一次. 但是程序员在代码中主动调用的不记录在这之内.</p><p><strong>finalize()主要使用的方面:</strong></p><p>java垃圾回收器只能回收创建在堆中的java对象, 而对于不是这种方式创建的对象则没有方法处理, 这就需要使用finalize()对这部分对象所占的资源进行释放. 使用到这一点的就是JNI本地对象, 通过JNI来调用本地方法创建的对象只能通过finalize()保证使用之后进行销毁,释放内存</p><p>充当保证使用之后释放资源的最后一道屏障, 比如使用数据库连接之后未断开,并且由于程序员的个人原因忘记了释放连接, 这时就只能依靠finalize()函数来释放资源.</p><p>尽量避免使用finalize():</p><p>　finalize()不一定会被调用, 因为java的垃圾回收器的特性就决定了它不一定会被调用</p><p>就算finalize()函数被调用, 它被调用的时间充满了不确定性, 因为程序中其他线程的优先级远远高于执行finalize（）函数线程的优先级。也许等到finalize()被调用, 数据库的连接池或者文件句柄早就耗尽了.</p><p>如果一种未被捕获的异常在使用finalize方法时被抛出，这个异常不会被捕获，finalize方法的终结过程也会终止，造成对象出于破坏的状态。被破坏的对象又很可能导致部分资源无法被回收, 造成浪费.</p><p>finalize()和垃圾回收器的运行本身就要耗费资源, 也许会导致程序的暂时停止.</p><h3 id="强软弱虚引用"><a href="#强软弱虚引用" class="headerlink" title="强软弱虚引用"></a>强软弱虚引用</h3><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h4><p>最普遍的一种引用方式，如String s = “123”，变量s就是字符串“123”的强引用，只要强引用存在，则垃圾回收器就不会回收这个对象。我们平时的引用基本都是强引用。（永不回收）</p><h3 id="软引用（SoftReference）"><a href="#软引用（SoftReference）" class="headerlink" title="软引用（SoftReference）"></a>软引用（SoftReference）</h3><p>用于描述还有用但非必须的对象，如果内存不足，就回收。一般用于实现内存敏感的高速缓存，软引用可以和引用队列ReferenceQueue联合使用，如果软引用的对象被垃圾回收，JVM就会把这个软引用加入到与之关联的引用队列中。（不够才回收）</p><h3 id="弱引用（WeakReference）"><a href="#弱引用（WeakReference）" class="headerlink" title="弱引用（WeakReference）"></a>弱引用（WeakReference）</h3><p>　在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。（遇到就回收）</p><h3 id="虚引用（PhantomReference）"><a href="#虚引用（PhantomReference）" class="headerlink" title="虚引用（PhantomReference）"></a>虚引用（PhantomReference）</h3><p>是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。 虚引用主要用来跟踪对象被垃圾回收器回收的活动。（遇到就回收，必须与ReferenceQueue一起使用）</p><p>　虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。</p><h2 id="并发、线程"><a href="#并发、线程" class="headerlink" title="并发、线程"></a>并发、线程</h2><p><strong>创建多线程方式</strong></p><p><strong>方式一：继承Thread类的方式：</strong></p><ul><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中</li><li>创建Thread类的子类的对象</li><li>通过此对象调用start()：①启动当前线程 ② 调用当前线程的run()</li></ul><p><strong>方式二：实现Runnable接口的方式：</strong></p><ul><li><p>创建一个实现了Runnable接口的类</p></li><li><p>实现类去实现Runnable中的抽象方法：run()</p></li><li><p>创建实现类的对象</p></li><li><p>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</p></li></ul><ol><li>通过Thread类的对象调用start()</li></ol><p><strong>方式三：Callable接口 jdk5.0新增</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.创建一个实现Callable的实现类</span><span class="token keyword">class</span> <span class="token class-name">NumThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token punctuation">{</span>  <span class="token comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>     <span class="token punctuation">}</span>   <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>​<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadNew</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//3.创建Callable接口实现类的对象</span>    <span class="token class-name">NumThread</span> numThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span>    <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>numThread<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment">//6.获取Callable中call方法的返回值</span>      <span class="token comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span>      <span class="token class-name">Object</span> sum <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span>​<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&nbsp;&nbsp;<strong>说明：</strong></p><ul><li>如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</li><li>call()可以返回值的。</li><li>call()可以抛出异常，被外面的操作捕获，获取异常的信息</li><li>Callable是支持泛型的</li></ul><p><strong>新增方式二：使用线程池</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NumberThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>​<span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>​<span class="token punctuation">}</span>​<span class="token keyword">class</span> <span class="token class-name">NumberThread1</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>​<span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>​<span class="token punctuation">}</span>​<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPool</span> <span class="token punctuation">{</span>​<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//1. 提供指定线程数量的线程池</span> <span class="token class-name">ExecutorService</span> service <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ThreadPoolExecutor</span> service1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span> <span class="token comment">//设置线程池的属性</span>​<span class="token comment">//   System.out.println(service.getClass());</span><span class="token comment">//   service1.setCorePoolSize(15);</span><span class="token comment">//   service1.setKeepAliveTime();</span>​• <span class="token comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span>• service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适合适用于Runnable</span>• service<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NumberThread1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//适合适用于Runnable</span>​<span class="token comment">//   service.submit(Callable callable);//适合使用于Callable</span>   <span class="token comment">//3.关闭连接池</span>   service<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>​<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明：</strong></p><ul><li>好处：</li><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理</li><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没任务时最多保持多长时间后会终止</li></ul><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><p><strong>1.线程通信涉及到的三个方法：</strong></p><ul><li>wait():一旦执行此方法，当前线程就进入阻塞状态，并释放同步监视器。</li><li>notify():一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个。</li><li>notifyAll():一旦执行此方法，就会唤醒所有被wait的线程。</li></ul><p><strong>2.说明：</strong></p><ul><li>wait()，notify()，notifyAll()三个方法必须使用在同步代码块或同步方法中。</li><li>wait()，notify()，notifyAll()三个方法的调用者必须是同步代码块或同步方法中的同步监视器。</li><li>否则，会出现IllegalMonitorStateException异常</li><li>wait()，notify()，notifyAll()三个方法是定义在java.lang.Object类中。</li></ul><h3 id="wait-和-sleep-的区别"><a href="#wait-和-sleep-的区别" class="headerlink" title="wait() 和 sleep() 的区别"></a>wait() 和 sleep() 的区别</h3><h3 id="同："><a href="#同：" class="headerlink" title="同："></a>同：</h3><ul><li>都是线程同步时会用到的方法，使当前线程暂停运行，把机会交给其他线程</li><li>如果任何线程在等待期间被中断都会抛出InterruptedException</li><li>都是native() 方法</li></ul><h3 id="异："><a href="#异：" class="headerlink" title="异："></a>异：</h3><ul><li>wait() 是Object超类中的方法；而sleep()是线程Thread类中的方法</li><li>对锁的持有不同，wait()会释放锁，而sleep()并不释放锁</li><li>唤醒方法不完全相同，wait() 依靠notify或者notifyAll 、中断、达到指定时间来唤醒；而sleep()到达指定时间被唤醒.</li><li>使用位置不同，wait只能在同步代码块或同步控制块中使用，而sleep可以在任何位置使用。</li></ul><h3 id="wait-与-await"><a href="#wait-与-await" class="headerlink" title="wait() 与 await()"></a>wait() 与 await()</h3><ul><li>wait()是Object超类中的方法，而await()是ConditionObject类里面的方法.</li><li>await会导致当前线程被阻塞，会释放锁，这点和wait是一样的</li><li>await中的lock不再使用synchronized把代码同步包装起来</li><li>await的阻塞需要另外的一个对象condition</li><li>notify是用来唤醒使用wait的线程；而signal是用来唤醒await线程。</li><li>所在的超类不同使用场景也不同，wait一般用于Synchronized中，而await只能用于ReentrantLock锁中</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好用的IDEA 快捷键大全</title>
      <link href="/2022/08/08/hao-yong-de-idea-kuai-jie-jian-da-quan/"/>
      <url>/2022/08/08/hao-yong-de-idea-kuai-jie-jian-da-quan/</url>
      
        <content type="html"><![CDATA[<p>【个人提取】</p><p>【Ctrl + X&nbsp;删除行</p><p>【Ctrl + Z&nbsp;撤销快捷键</p><p>【Ctrl + shift + Z&nbsp;取消本次撤销</p><p>【Ctrl + D 复制行</p><p>【Ctrl + B&nbsp;（类似Ctrl+鼠标左键）快速打开光标处的类或方法（跳到声明定义处）</p><p>【Ctrl + Alt + B 跳到接口的实现类、跳到接口中方法的实现处、跳到方法的实现处&nbsp;</p><p>【Ctrl + U 跳到父类、跳到类实现的接口</p><p>【Ctrl + F&nbsp;&nbsp;在当前页查找&nbsp;&nbsp;按ESC退出&nbsp;（eclipse\idea）&nbsp;&nbsp;双击要查找的词，再Ctrl+F</p><p>【Ctrl + Shift + F全局查找 按ESC退出&nbsp;（idea）&nbsp;&nbsp;&nbsp;（eclipse：Ctrl+H）</p><p>【Ctrl + N 按名字搜索类（可输入简写的部分首字母）</p><p>【Ctrl + Shift + N 按文件名搜索文件</p><p>【Shift + Shift 可搜索类、资源、配置项、方法等，还能搜索路径。</p><p>其中搜索路径非常实用，例如你写了一个功能叫hello，在java，js，css，jsp中都有hello的文件夹，那我们可以搜索”hello/“找到路径中包含hello的文件夹。</p><p>【Alt + F7查找类或方法在哪被使用、查找当前变量的作用，并列表显示</p><p>【Alt + Insert&nbsp;&nbsp;&nbsp;getter、setter方法</p><p>【Ctrl + H&nbsp;&nbsp;&nbsp;查看点中的类的继承关系</p><p>【Alt + left/right 切换已打开的代码视图页面</p><p>【Alt + Up/Down 在方法间快速移动定位</p><p>【Ctrl + Alt + left/right 回到上一次看代码的位置</p><p>【Ctrl + Alt + up/down 在Alt+F7查到的下面的列表里上下移动显示</p><p>【Ctrl + / 单行注释// 添加、去除</p><p>【Ctrl + Shift + / 多行注释/*&nbsp;*/ 添加、去除</p><h2 id="【Debug】"><a href="#【Debug】" class="headerlink" title="【Debug】"></a>【Debug】</h2><ul><li><p>F7 步入</p></li><li><p>F8 步过</p></li><li><p>Shift+F8 步出</p></li><li><p>Alt + F9 运行至光标处</p></li></ul><p>TRL</p><ul><li><p>F9 恢复程序</p></li><li><p>Ctrl +Shift + F8 查看断点</p></li></ul><p>【常规】</p><ul><li><p><strong>Ctrl + Shift + Enter</strong>，语句完成</p></li><li><p><strong>“！”</strong>，否定完成，输入表达式时按 “！”键</p></li><li><p><strong>Ctrl + E</strong>，最近的文件</p></li><li><p><strong>Ctrl + Shift + E</strong>，最近更改的文件</p></li><li><p><strong>Shift + click</strong>，可以关闭文件</p></li><li><p>**Ctrl + [ OR ]**，可以跑到大括号的开头与结尾</p></li><li><p><strong>Ctrl + F12</strong>，可以显示当前文件的结构</p></li><li><p><strong>Ctrl + F7</strong>，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</p></li><li><p><strong>Ctrl + N</strong>，可以快速打开类</p></li><li><p><strong>Ctrl + Shift + N</strong>，可以快速打开文件</p></li><li><p><strong>Alt + Q</strong>，可以看到当前方法的声明</p></li><li><p><strong>Ctrl + P</strong>，可以显示参数信息</p></li><li><p><strong>Ctrl + Shift + Insert</strong>，可以选择剪贴板内容并插入</p></li><li><p><strong>Alt + Insert</strong>，可以生成构造器/Getter/Setter等</p></li><li><p><strong>Ctrl + Alt + V</strong>，可以引入变量。例如：new String();&nbsp;自动导入变量定义</p></li><li><p><strong>Ctrl + Alt + T</strong>，可以把代码包在一个块内，例如：try/catch</p></li><li><p><strong>Ctrl + Enter</strong>，导入包，自动修正</p></li><li><p><strong>Ctrl + Alt + L</strong>，格式化代码</p></li><li><p><strong>Ctrl + Alt + I</strong>，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</p></li><li><p><strong>Ctrl + Alt + O</strong>，优化导入的类和包</p></li><li><p><strong>Ctrl + R</strong>，替换文本</p></li><li><p><strong>Ctrl + F</strong>，查找文本</p></li><li><p><strong>Ctrl + Shift + Space</strong>，自动补全代码</p></li><li><p><strong>Ctrl + 空格</strong>，代码提示（与系统输入法快捷键冲突）</p></li><li><p><strong>Ctrl + Shift + Alt + N</strong>，查找类中的方法或变量</p></li><li><p><strong>Alt + Shift + C</strong>，最近的更改</p></li><li><p><strong>Alt + Shift + Up/Down</strong>，上/下移一行</p></li><li><p><strong>Shift + F6</strong>，重构 - 重命名</p></li><li><p><strong>Ctrl + X</strong>，删除行</p></li><li><p><strong>Ctrl + D</strong>，复制行</p></li><li><p>**Ctrl + / 或 Ctrl + Shift + /<strong>，注释（//或者/</strong>/）</p></li><li><p><strong>Ctrl + J</strong>，自动代码（例如：serr）</p></li><li><p><strong>Ctrl + Alt + J</strong>，用动态模板环绕</p></li><li><p><strong>Ctrl + H</strong>，显示类结构图（类的继承层次）</p></li><li><p><strong>Ctrl + Q</strong>，显示注释文档</p></li><li><p><strong>Alt + F1</strong>，查找代码所在位置</p></li><li><p><strong>Alt + 1</strong>，快速打开或隐藏工程面板</p></li><li><p><strong>Ctrl + Alt + left/right</strong>，返回至上次浏览的位置</p></li><li><p><strong>Alt + left/right</strong>，切换代码视图</p></li><li><p><strong>Alt + Up/Down</strong>，在方法间快速移动定位</p></li><li><p><strong>Ctrl + Shift + Up/Down</strong>，向上/下移动语句</p></li><li><p><strong>F2 或 Shift+F2</strong>，高亮错误或警告快速定位</p></li><li><p><strong>Tab</strong>，代码标签输入完成后，按 Tab，生成代码</p></li><li><p><strong>Ctrl + Shift + F7</strong>，高亮显示所有该文本，按 Esc 高亮消失</p></li><li><p><strong>Alt + F3</strong>，逐个往下查找相同文本，并高亮显示</p></li><li><p><strong>Ctrl + Up/Down</strong>，光标中转到第一行或最后一行下</p></li><li><p><strong>Ctrl + B / Ctrl + Click</strong>，快速打开光标处的类或方法（跳转到定义处）</p></li><li><p><strong>Ctrl + Alt + B</strong>，跳转到方法实现处</p></li><li><p><strong>Ctrl + Shift + Backspace</strong>，跳转到上次编辑的地方</p></li><li><p><strong>Ctrl + O</strong>，重写方法</p></li><li><p><strong>Ctrl + Alt + Space</strong>，类名自动完成</p></li><li><p><strong>Ctrl + Alt + Up/Down</strong>，快速跳转搜索结果</p></li><li><p><strong>Ctrl + Shift + J</strong>，整合两行</p></li><li><p><strong>Alt + F8</strong>，计算变量值</p></li><li><p><strong>Ctrl + Shift + V</strong>，可以将最近使用的剪贴板内容选择插入到文本</p></li><li><p><strong>Ctrl + Alt + Shift + V</strong>，简单粘贴</p></li><li><p><strong>Shift + Esc</strong>，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</p></li><li><p><strong>F12</strong>，把焦点从编辑器移到最近使用的工具窗口</p></li><li><p><strong>Shift + F1</strong>，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</p></li><li><p><strong>Ctrl + W</strong>，可以选择单词，类似与鼠标全选文字，他会根据单词进行匹配</p></li><li><p><strong>Ctrl + Shift + W</strong>，取消选择光标所在词</p></li><li><p><strong>Alt + F7</strong>，查找整个工程中使用地某一个类、方法或者变量的位置</p></li><li><p><strong>Ctrl + I</strong>，实现方法</p></li><li><p><strong>Ctrl + Shift + U</strong>，大小写转化</p></li><li><p><strong>Ctrl + Y</strong>，删除当前行</p></li><li><p><strong>Shift + Enter</strong>，向下插入新行</p></li><li><p><strong>Ctrl + J</strong>，查看更多快捷键</p></li><li><p><strong>Ctrl + Shift + F</strong>，全局查找</p></li><li><p><strong>Ctrl + F</strong>，查找/Shift+F3，向上查找/F3，向下查找</p></li><li><p><strong>Ctrl + Shift + S</strong>，高级搜索</p></li><li><p><strong>Ctrl + U</strong>，转到父类</p></li><li><p><strong>Ctrl + Alt + S</strong>，打开设置对话框</p></li><li><p><strong>Alt + Shift + Inert</strong>，开启/关闭列选择模式</p></li><li><p><strong>Ctrl + Alt + Shift + S</strong>，打开当前项目/模块属性</p></li><li><p><strong>Ctrl + G</strong>，定位行</p></li><li><p><strong>Alt + Home</strong>，跳转到导航栏</p></li><li><p><strong>Ctrl + Enter</strong>，上插一行</p></li><li><p><strong>Ctrl + Backspace</strong>，按单词删除</p></li><li><p>**Ctrl + “+/-“**，当前方法展开、折叠</p></li><li><p>**Ctrl + Shift + “+/-“**，全部展开、折叠</p></li></ul><p>【调试部分、编译】</p><ul><li><p>Ctrl + F2，停止</p></li><li><p>Alt + Shift + F9，选择 Debug</p></li><li><p>Alt + Shift +F10，选择 Run</p></li><li><p>Ctrl + Shift + F9，编译</p></li><li><p>Ctrl + Shift + F10，运行</p></li><li><p>Ctrl + Shift + F8，查看断点</p></li><li><p>F8，步过</p></li><li><p>F7，步入</p></li><li><p>Shift + F7，智能步入</p></li><li><p>Shift + F8，步出</p></li><li><p>Alt + Shift + F8，强制步过</p></li><li><p>Alt + Shift + F7，强制步入</p></li><li><p>Alt + F9，运行至光标处</p></li><li><p>Ctrl + Alt + F9，强制运行至光标处</p></li><li><p>F9，恢复程序</p></li><li><p>Alt + F10，定位到断点</p></li><li><p>Ctrl + F8，切换行断点</p></li><li><p>Ctrl + F9，生成项目</p></li><li><p>Alt + 1，项目</p></li><li><p>Alt + 2，收藏</p></li><li><p>Alt + 6，TODO</p></li><li><p>Alt + 7，结构</p></li><li><p>Ctrl + Shift + C，复制路径</p></li><li><p>Ctrl + Alt + Shift + C，复制引用，必须选择类名</p></li><li><p>Ctrl + Alt + Y，同步</p></li><li><p>Ctrl + ~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</p></li><li><p>Shift + F12，还原默认布局</p></li><li><p>Ctrl + Shift + F12，隐藏/恢复所有窗口</p></li><li><p>Ctrl + F4，关闭</p></li><li><p>Ctrl + Shift + F4，关闭活动选项卡</p></li><li><p>Ctrl + Tab，转到下一个拆分器</p></li><li><p>Ctrl + Shift + Tab，转到上一个拆分器</p></li></ul><p>【重构】</p><ul><li><p>Ctrl + Alt + Shift + T，弹出重构菜单</p></li><li><p>Shift + F6，重命名</p></li><li><p>F6，移动</p></li><li><p>F5，复制</p></li><li><p>Alt + Delete，安全删除</p></li><li><p>Ctrl + Alt + N，内联</p></li></ul><p>【查找】</p><ul><li><p>Ctrl + F，查找</p></li><li><p>Ctrl + R，替换</p></li><li><p>F3，查找下一个</p></li><li><p>Shift + F3，查找上一个</p></li><li><p>Ctrl + Shift + F，在路径中查找</p></li><li><p>Ctrl + Shift + R，在路径中替换</p></li><li><p>Ctrl + Shift + S，搜索结构</p></li><li><p>Ctrl + Shift + M，替换结构</p></li><li><p>Alt + F7，查找用法</p></li><li><p>Ctrl + Alt + F7，显示用法</p></li><li><p>Ctrl + F7，在文件中查找用法</p></li><li><p>Ctrl + Shift + F7，在文件中高亮显示用法</p></li></ul><p>【VCS】</p><ul><li><p>Alt + ~，VCS 操作菜单</p></li><li><p>Ctrl + K，提交更改</p></li><li><p>Ctrl + T，更新项目</p></li><li><p>Ctrl + Alt + Shift + D，显示变化</p></li></ul><p>【大佬批量处理字段操作】</p><ul><li><p>alt + 鼠标选中所有字段</p></li><li><p>ctrl + → 键 选中要删除的单词</p></li><li><p>shift + ← 选中要删除的单词</p></li><li><p>Backspace 删除</p></li><li><p>shift + tab 对齐</p></li><li><p>ctrl + backspace 变成一行</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot三大开发工具，你都用过么？</title>
      <link href="/2022/08/08/springboot-san-da-kai-fa-gong-ju-ni-du-yong-guo-me/"/>
      <url>/2022/08/08/springboot-san-da-kai-fa-gong-ju-ni-du-yong-guo-me/</url>
      
        <content type="html"><![CDATA[<h2 id="一、SpringBoot-Dedevtools"><a href="#一、SpringBoot-Dedevtools" class="headerlink" title="一、SpringBoot Dedevtools"></a>一、SpringBoot Dedevtools</h2><p>他是一个让SpringBoot支持热部署的工具，下面是引用的方法</p><p>要么在创建项目的时候直接勾选下面的配置：</p><p><img src="https://img-blog.csdnimg.cn/20200826115753154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vYXN0QWxs,size_16,color_FFFFFF,t_70#pic_center"></p><p>要么给springBoot项目添加下面的依赖：</p><p>xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>idea修改完代码后再按下 ctrl + f9 使其重新编译一下，即完成了热部署功能<br>eclipse是按ctrl + s保存 即可自动编译<br>如果你想一修改代码就自动重新编译，无需按ctrl+f9。只需要下面的操作：</p><h3 id="一、在idea的setting中把下面的勾都打上"><a href="#一、在idea的setting中把下面的勾都打上" class="headerlink" title="一、在idea的setting中把下面的勾都打上"></a><a href="https://kaiboshi.gitee.io/posts/28049a40.html#%E4%B8%80%E3%80%81%E5%9C%A8idea%E7%9A%84setting%E4%B8%AD%E6%8A%8A%E4%B8%8B%E9%9D%A2%E7%9A%84%E5%8B%BE%E9%83%BD%E6%89%93%E4%B8%8A" title="一、在idea的setting中把下面的勾都打上"></a><strong>一、在idea的setting中把下面的勾都打上</strong></h3><p><img src="https://img-blog.csdnimg.cn/20210207163505151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vYXN0QWxs,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="二、进入pom-xml-在build的反标签后给个光标，然后按Alt-Shift-ctrl"><a href="#二、进入pom-xml-在build的反标签后给个光标，然后按Alt-Shift-ctrl" class="headerlink" title="二、进入pom.xml,在build的反标签后给个光标，然后按Alt+Shift+ctrl+/"></a><a href="https://kaiboshi.gitee.io/posts/28049a40.html#%E4%BA%8C%E3%80%81%E8%BF%9B%E5%85%A5pom-xml-%E5%9C%A8build%E7%9A%84%E5%8F%8D%E6%A0%87%E7%AD%BE%E5%90%8E%E7%BB%99%E4%B8%AA%E5%85%89%E6%A0%87%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8C%89Alt-Shift-ctrl" title="二、进入pom.xml,在build的反标签后给个光标，然后按Alt+Shift+ctrl+/"></a><strong>二、进入pom.xml,在build的反标签后给个光标，然后按<code>Alt+Shift+ctrl+/</code></strong></h3><p><img src="https://img-blog.csdnimg.cn/20210207163825254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vYXN0QWxs,size_16,color_FFFFFF,t_70#pic_center"></p><h3 id="三、然后勾选下面的东西，接着重启idea即可"><a href="#三、然后勾选下面的东西，接着重启idea即可" class="headerlink" title="三、然后勾选下面的东西，接着重启idea即可"></a><a href="https://kaiboshi.gitee.io/posts/28049a40.html#%E4%B8%89%E3%80%81%E7%84%B6%E5%90%8E%E5%8B%BE%E9%80%89%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%8C%E6%8E%A5%E7%9D%80%E9%87%8D%E5%90%AFidea%E5%8D%B3%E5%8F%AF" title="三、然后勾选下面的东西，接着重启idea即可"></a><strong>三、然后勾选下面的东西，接着重启idea即可</strong></h3><p><img src="https://img-blog.csdnimg.cn/20210207163906408.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vYXN0QWxs,size_16,color_FFFFFF,t_70#pic_center"></p><h2 id="二、Lombok"><a href="#二、Lombok" class="headerlink" title="二、Lombok"></a><a href="https://kaiboshi.gitee.io/posts/28049a40.html#%E4%BA%8C%E3%80%81Lombok" title="二、Lombok"></a>二、Lombok</h2><p>Lombok是简化JavaBean开发的工具，让开发者省去构造器，getter,setter的书写。<br>在项目初始化时勾选下面的配置，即可使用Lombok</p><p><img src="https://img-blog.csdnimg.cn/20210125170751114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vYXN0QWxs,size_16,color_FFFFFF,t_70"></p><p>或者在项目中导入下面的依赖：</p><p>xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用时，idea还需要下载下面的插件：</p><p><img src="https://img-blog.csdnimg.cn/20210125171749693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vYXN0QWxs,size_16,color_FFFFFF,t_70#pic_center"></p><p>下面的使用的例子</p><p>jAVA</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableField</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">TableName</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token comment">//全参构造器</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token comment">//无参构造器</span><span class="token annotation punctuation">@Data</span><span class="token comment">//getter + setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、Spring-Configuration-Processor"><a href="#三、Spring-Configuration-Processor" class="headerlink" title="三、Spring Configuration Processor"></a><a href="https://kaiboshi.gitee.io/posts/28049a40.html#%E4%B8%89%E3%80%81Spring-Configuration-Processor" title="三、Spring Configuration Processor"></a>三、Spring Configuration Processor</h2><p>该工具是给实体类的属性注入开启提示，自我感觉该工具意义不是特别大！<br>因为SpringBoot存在属性注入，比如下面的实体类：</p><p>java</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>lzl<span class="token punctuation">.</span></span><span class="token class-name">HelloWorld</span><span class="token punctuation">.</span>entity<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token comment">/** * @author Lenovo * */</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"mypet"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> nickName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> strain<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getNickName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> nickName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNickName</span><span class="token punctuation">(</span><span class="token class-name">String</span> nickName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nickName <span class="token operator">=</span> nickName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStrain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> strain<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStrain</span><span class="token punctuation">(</span><span class="token class-name">String</span> strain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strain <span class="token operator">=</span> strain<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Pet [nickName="</span> <span class="token operator">+</span> nickName <span class="token operator">+</span> <span class="token string">", strain="</span> <span class="token operator">+</span> strain <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>想要在application.properties和application.yml中给mypet注入属性，却没有任何的提示，为了解决这一问题，我们在创建SpringBoot的时候勾选下面的场景：</p><p><img src="https://img-blog.csdnimg.cn/20210125172020154.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01vYXN0QWxs,size_16,color_FFFFFF,t_70#pic_center"></p><p>或者直接在项目中添加下面的依赖:</p><p>xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并在build的标签中排除对该工具的打包：（减少打成jar包的大小）</p><p>xml</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liaojunkun的第一个博客</title>
      <link href="/2022/08/08/wo-de-de-di-yi-ge-bo-ke/"/>
      <url>/2022/08/08/wo-de-de-di-yi-ge-bo-ke/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
